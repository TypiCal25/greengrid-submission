{
  "address": "0x769f629C4bd12E3A714ccf72A6c1936940a4c1BC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "cleaner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "neighborhoodName",
          "type": "string"
        }
      ],
      "name": "CleanerAssignedToNeighborhood",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CleanerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "cleaner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "neighborhoodName",
          "type": "string"
        }
      ],
      "name": "CleanerRemovedFromNeighborhood",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "house",
          "type": "address"
        }
      ],
      "name": "CollectionEventConfirmed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cleaner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "house",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "imageHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CollectionEventCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "complaintId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "neighborhood",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "imageHash",
          "type": "bytes32"
        }
      ],
      "name": "ComplaintCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "ContractPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "neighborhood",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "residents",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "HouseRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "neighborhoodName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "NeighborhoodAdminAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "neighborhoodName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NeighborhoodRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "neighborhoodName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "NeighborhoodStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "PointsAwarded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleaner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "assignCleanerToNeighborhood",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "assignNeighborhoodAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_cleaners",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "batchAssignCleanersToNeighborhood",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_cleaners",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "batchRemoveCleanersFromNeighborhood",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cleanerNeighborhoodAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cleaners",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reputation",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "registrationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collectionEvents",
      "outputs": [
        {
          "internalType": "address",
          "name": "cleaner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "house",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "confirmedByHouse",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "complaints",
      "outputs": [
        {
          "internalType": "address",
          "name": "reporter",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "imageURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "location",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "neighborhood",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "complaintId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_imageURI",
          "type": "string"
        }
      ],
      "name": "confirmGarbageCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllNeighborhoods",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRegisteredCleaners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRegisteredHouses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleanerAddress",
          "type": "address"
        }
      ],
      "name": "getCleaner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "points",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reputation",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "collectionHashes",
              "type": "bytes32[]"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "registrationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "assignedNeighborhoods",
              "type": "string[]"
            }
          ],
          "internalType": "struct CleanChain.Cleaner",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleanerAddress",
          "type": "address"
        }
      ],
      "name": "getCleanerCollectionEvents",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleanerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getCleanerCollectionEventsPaginated",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleanerAddress",
          "type": "address"
        }
      ],
      "name": "getCleanerCollectionStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalEvents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmedEvents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmationRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleanerAddress",
          "type": "address"
        }
      ],
      "name": "getCleanerNeighborhoods",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "getCleanersInNeighborhood",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_eventId",
          "type": "uint256"
        }
      ],
      "name": "getCollectionEvent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "cleaner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "house",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "imageHash",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "imageURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "confirmedByHouse",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "eventId",
              "type": "uint256"
            }
          ],
          "internalType": "struct CleanChain.CollectionEvent",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddress",
          "type": "address"
        }
      ],
      "name": "getHouse",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "points",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "neighborhood",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "residents",
              "type": "uint8"
            },
            {
              "internalType": "bytes32[]",
              "name": "collectionHashes",
              "type": "bytes32[]"
            },
            {
              "internalType": "bool",
              "name": "isRegistered",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "registrationTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CleanChain.House",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddress",
          "type": "address"
        }
      ],
      "name": "getHouseCollectionEvents",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "getHouseCollectionEventsPaginated",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddress",
          "type": "address"
        }
      ],
      "name": "getHouseCollectionStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalEvents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmedEvents",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingEvents",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "getHousesInNeighborhood",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "getNeighborhood",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "registrationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalHouses",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCleaners",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCollections",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "confirmedCollections",
              "type": "uint256"
            }
          ],
          "internalType": "struct CleanChain.Neighborhood",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "getNeighborhoodStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalHouses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCleaners",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollections",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmedCollections",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmationRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCleaners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalHouses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalNeighborhoods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "houses",
      "outputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "neighborhood",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "residents",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "registrationTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleaner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "isCleanerAlreadyAssigned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleaner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "isCleanerAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isNeighborhoodAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isRegisteredCleaner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isRegisteredHouse",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_imageHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_imageURI",
          "type": "string"
        }
      ],
      "name": "logGarbageCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "neighborhoodAdmins",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "neighborhoodCleaners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "neighborhoodHouses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "neighborhoods",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "registrationTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalHouses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCleaners",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCollections",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "confirmedCollections",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "pauseContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerCleaner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_residents",
          "type": "uint8"
        }
      ],
      "name": "registerHouse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "registerNeighborhood",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredCleaners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredHouses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredNeighborhoods",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleaner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "removeCleanerFromNeighborhood",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "setNeighborhoodStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCleaners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollectionEvents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalComplaints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalHouses",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cleanerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_reputation",
          "type": "uint256"
        }
      ],
      "name": "updateCleanerReputation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_houseAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_points",
          "type": "uint256"
        }
      ],
      "name": "updateHousePoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_neighborhood",
          "type": "string"
        }
      ],
      "name": "validateNeighborhoodExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x871281fed739e6121397138c94625620b7775a3cdcebadb870d23a067162f2d8",
  "receipt": {
    "to": null,
    "from": "0x19c243C557Ac5237Da731E814B16A8E9Dc0A1Ca3",
    "contractAddress": "0x769f629C4bd12E3A714ccf72A6c1936940a4c1BC",
    "transactionIndex": 3,
    "gasUsed": "5452999",
    "logsBloom": "0x
    "blockHash": "0xfdb4fe357b6b3aeeee456511b7fba6f1a4988ea427cc9fe8a336d4901f05088e",
    "transactionHash": "0x871281fed739e6121397138c94625620b7775a3cdcebadb870d23a067162f2d8",
    "logs": [],
    "blockNumber": 19395193,
    "cumulativeGasUsed": "6108437",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x19c243C557Ac5237Da731E814B16A8E9Dc0A1Ca3"
  ],
  "numDeployments": 1,
  "solcInputHash": "73b949a5f148014f2ab3af5a49c43030",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cleaner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"neighborhoodName\",\"type\":\"string\"}],\"name\":\"CleanerAssignedToNeighborhood\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CleanerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cleaner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"neighborhoodName\",\"type\":\"string\"}],\"name\":\"CleanerRemovedFromNeighborhood\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"house\",\"type\":\"address\"}],\"name\":\"CollectionEventConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cleaner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"house\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CollectionEventCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"complaintId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"neighborhood\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"}],\"name\":\"ComplaintCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"ContractPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"neighborhood\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"residents\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"HouseRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"neighborhoodName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"NeighborhoodAdminAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"neighborhoodName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NeighborhoodRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"neighborhoodName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"NeighborhoodStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"PointsAwarded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleaner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"assignCleanerToNeighborhood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"assignNeighborhoodAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cleaners\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"batchAssignCleanersToNeighborhood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cleaners\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"batchRemoveCleanersFromNeighborhood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cleanerNeighborhoodAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cleaners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collectionEvents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cleaner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"house\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"confirmedByHouse\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"complaints\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"location\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"neighborhood\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"complaintId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_imageURI\",\"type\":\"string\"}],\"name\":\"confirmGarbageCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNeighborhoods\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRegisteredCleaners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRegisteredHouses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerAddress\",\"type\":\"address\"}],\"name\":\"getCleaner\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reputation\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"collectionHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"assignedNeighborhoods\",\"type\":\"string[]\"}],\"internalType\":\"struct CleanChain.Cleaner\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerAddress\",\"type\":\"address\"}],\"name\":\"getCleanerCollectionEvents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getCleanerCollectionEventsPaginated\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerAddress\",\"type\":\"address\"}],\"name\":\"getCleanerCollectionStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEvents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedEvents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmationRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerAddress\",\"type\":\"address\"}],\"name\":\"getCleanerNeighborhoods\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"getCleanersInNeighborhood\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_eventId\",\"type\":\"uint256\"}],\"name\":\"getCollectionEvent\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cleaner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"house\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"confirmedByHouse\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"internalType\":\"struct CleanChain.CollectionEvent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddress\",\"type\":\"address\"}],\"name\":\"getHouse\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"neighborhood\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"residents\",\"type\":\"uint8\"},{\"internalType\":\"bytes32[]\",\"name\":\"collectionHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CleanChain.House\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddress\",\"type\":\"address\"}],\"name\":\"getHouseCollectionEvents\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getHouseCollectionEventsPaginated\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddress\",\"type\":\"address\"}],\"name\":\"getHouseCollectionStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalEvents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedEvents\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingEvents\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"getHousesInNeighborhood\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"getNeighborhood\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHouses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCleaners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedCollections\",\"type\":\"uint256\"}],\"internalType\":\"struct CleanChain.Neighborhood\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"getNeighborhoodStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalHouses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCleaners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedCollections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmationRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCleaners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalHouses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalNeighborhoods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"houses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"neighborhood\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"residents\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleaner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"isCleanerAlreadyAssigned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleaner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"isCleanerAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isNeighborhoodAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isRegisteredCleaner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isRegisteredHouse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_imageURI\",\"type\":\"string\"}],\"name\":\"logGarbageCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"neighborhoodAdmins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"neighborhoodCleaners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"neighborhoodHouses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"neighborhoods\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHouses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCleaners\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCollections\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedCollections\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"pauseContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerCleaner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_residents\",\"type\":\"uint8\"}],\"name\":\"registerHouse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"registerNeighborhood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredCleaners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredHouses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredNeighborhoods\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleaner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"removeCleanerFromNeighborhood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"setNeighborhoodStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCleaners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollectionEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalComplaints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHouses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cleanerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reputation\",\"type\":\"uint256\"}],\"name\":\"updateCleanerReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_houseAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_points\",\"type\":\"uint256\"}],\"name\":\"updateHousePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_neighborhood\",\"type\":\"string\"}],\"name\":\"validateNeighborhoodExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"CleanChain Team\",\"kind\":\"dev\",\"methods\":{\"assignCleanerToNeighborhood(address,string)\":{\"params\":{\"_cleaner\":\"Address of the cleaner\",\"_neighborhood\":\"Name of the neighborhood\"}},\"assignNeighborhoodAdmin(string,address)\":{\"params\":{\"_neighborhood\":\"Name of the neighborhood\",\"_newAdmin\":\"Address of the new admin\"}},\"batchAssignCleanersToNeighborhood(address[],string)\":{\"params\":{\"_cleaners\":\"Array of cleaner addresses\",\"_neighborhood\":\"Name of the neighborhood\"}},\"batchRemoveCleanersFromNeighborhood(address[],string)\":{\"params\":{\"_cleaners\":\"Array of cleaner addresses\",\"_neighborhood\":\"Name of the neighborhood\"}},\"confirmGarbageCollection(uint256,bytes32,string)\":{\"params\":{\"_eventId\":\"ID of the collection event to confirm\",\"_imageHash\":\"Hash of the validation image taken by the house\",\"_imageURI\":\"URI pointing to the house's validation image\"}},\"getAllNeighborhoods()\":{\"returns\":{\"_0\":\"Array of neighborhood names\"}},\"getAllRegisteredCleaners()\":{\"returns\":{\"_0\":\"Array of all registered cleaner addresses\"}},\"getAllRegisteredHouses()\":{\"returns\":{\"_0\":\"Array of all registered house addresses\"}},\"getCleaner(address)\":{\"params\":{\"_cleanerAddress\":\"Address of the cleaner\"},\"returns\":{\"_0\":\"Cleaner struct containing all cleaner information\"}},\"getCleanerCollectionEvents(address)\":{\"details\":\"This function may run out of gas with large datasets. Use getCleanerCollectionEventsPaginated instead.\",\"params\":{\"_cleanerAddress\":\"Address of the cleaner\"},\"returns\":{\"_0\":\"Array of event IDs for the cleaner\"}},\"getCleanerCollectionEventsPaginated(address,uint256,uint256)\":{\"params\":{\"_cleanerAddress\":\"Address of the cleaner\",\"_limit\":\"Maximum number of events to return\",\"_offset\":\"Starting index for pagination\"},\"returns\":{\"_0\":\"Array of event IDs for the cleaner\",\"_1\":\"Total count of events for this cleaner\"}},\"getCleanerCollectionStats(address)\":{\"params\":{\"_cleanerAddress\":\"Address of the cleaner\"},\"returns\":{\"confirmationRate\":\"Percentage of confirmed collections (0-100)\",\"confirmedEvents\":\"Number of confirmed collection events\",\"totalEvents\":\"Total collection events by the cleaner\"}},\"getCleanerNeighborhoods(address)\":{\"params\":{\"_cleanerAddress\":\"Address of the cleaner\"},\"returns\":{\"_0\":\"Array of neighborhood names where cleaner is authorized\"}},\"getCleanersInNeighborhood(string)\":{\"params\":{\"_neighborhood\":\"Name of the neighborhood\"},\"returns\":{\"_0\":\"Array of cleaner addresses in the neighborhood\"}},\"getCollectionEvent(uint256)\":{\"params\":{\"_eventId\":\"ID of the collection event\"},\"returns\":{\"_0\":\"CollectionEvent struct containing event details\"}},\"getHouse(address)\":{\"params\":{\"_houseAddress\":\"Address of the house\"},\"returns\":{\"_0\":\"House struct containing all house information\"}},\"getHouseCollectionEvents(address)\":{\"details\":\"This function may run out of gas with large datasets. Use getHouseCollectionEventsPaginated instead.\",\"params\":{\"_houseAddress\":\"Address of the house\"},\"returns\":{\"_0\":\"Array of event IDs for the house\"}},\"getHouseCollectionEventsPaginated(address,uint256,uint256)\":{\"params\":{\"_houseAddress\":\"Address of the house\",\"_limit\":\"Maximum number of events to return\",\"_offset\":\"Starting index for pagination\"},\"returns\":{\"_0\":\"Array of event IDs for the house\",\"_1\":\"Total count of events for this house\"}},\"getHouseCollectionStats(address)\":{\"params\":{\"_houseAddress\":\"Address of the house\"},\"returns\":{\"confirmedEvents\":\"Number of confirmed collection events\",\"pendingEvents\":\"Number of pending (unconfirmed) collection events\",\"totalEvents\":\"Total collection events for the house\"}},\"getHousesInNeighborhood(string)\":{\"params\":{\"_neighborhood\":\"Name of the neighborhood\"},\"returns\":{\"_0\":\"Array of house addresses in the neighborhood\"}},\"getNeighborhood(string)\":{\"params\":{\"_neighborhood\":\"Name of the neighborhood\"},\"returns\":{\"_0\":\"Neighborhood struct containing all neighborhood information\"}},\"getNeighborhoodStats(string)\":{\"params\":{\"_neighborhood\":\"Name of the neighborhood\"},\"returns\":{\"confirmationRate\":\"Percentage of confirmed collections (0-100)\",\"confirmedCollections\":\"Number of confirmed collections\",\"totalCleaners\":\"Number of cleaners assigned to neighborhood\",\"totalCollections\":\"Total collection events in neighborhood\",\"totalHouses\":\"Number of houses in neighborhood\"}},\"getTotalCleaners()\":{\"returns\":{\"_0\":\"Total number of cleaners\"}},\"getTotalHouses()\":{\"returns\":{\"_0\":\"Total number of houses\"}},\"getTotalNeighborhoods()\":{\"returns\":{\"_0\":\"Total number of neighborhoods\"}},\"isCleanerAlreadyAssigned(address,string)\":{\"params\":{\"_cleaner\":\"Address of the cleaner\",\"_neighborhood\":\"Name of the neighborhood\"},\"returns\":{\"_0\":\"Boolean indicating if cleaner is already assigned\"}},\"isCleanerAuthorized(address,string)\":{\"params\":{\"_cleaner\":\"Address of the cleaner\",\"_neighborhood\":\"Name of the neighborhood\"},\"returns\":{\"_0\":\"Boolean indicating if cleaner is authorized\"}},\"isNeighborhoodAdmin(address)\":{\"params\":{\"_address\":\"Address to check\"},\"returns\":{\"_0\":\"Boolean indicating if address is a neighborhood admin\"}},\"isPaused()\":{\"returns\":{\"_0\":\"Boolean indicating if contract is paused\"}},\"isRegisteredCleaner(address)\":{\"params\":{\"_address\":\"Address to check\"},\"returns\":{\"_0\":\"Boolean indicating if address is a registered cleaner\"}},\"isRegisteredHouse(address)\":{\"params\":{\"_address\":\"Address to check\"},\"returns\":{\"_0\":\"Boolean indicating if address is a registered house\"}},\"logGarbageCollection(address,bytes32,string)\":{\"params\":{\"_houseAddress\":\"Address of the house where garbage was collected\",\"_imageHash\":\"Hash of the image taken as proof of collection\",\"_imageURI\":\"URI pointing to the off-chain stored image\"}},\"pauseContract(bool)\":{\"params\":{\"_paused\":\"New pause state\"}},\"registerHouse(string,uint8)\":{\"params\":{\"_neighborhood\":\"The neighborhood where the house is located\",\"_residents\":\"Number of residents in the house\"}},\"registerNeighborhood(string,string,address)\":{\"params\":{\"_admin\":\"Address of the neighborhood admin\",\"_description\":\"Description of the neighborhood\",\"_name\":\"Name of the neighborhood\"}},\"removeCleanerFromNeighborhood(address,string)\":{\"params\":{\"_cleaner\":\"Address of the cleaner\",\"_neighborhood\":\"Name of the neighborhood\"}},\"setNeighborhoodStatus(string,bool)\":{\"params\":{\"_isActive\":\"New status for the neighborhood\",\"_neighborhood\":\"Name of the neighborhood\"}},\"updateCleanerReputation(address,uint256)\":{\"params\":{\"_cleanerAddress\":\"Address of the cleaner\",\"_reputation\":\"New reputation value\"}},\"updateHousePoints(address,uint256)\":{\"params\":{\"_houseAddress\":\"Address of the house\",\"_points\":\"New points value\"}},\"validateNeighborhoodExists(string)\":{\"params\":{\"_neighborhood\":\"Name of the neighborhood to check\"},\"returns\":{\"_0\":\"Boolean indicating if neighborhood exists and is active\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assignCleanerToNeighborhood(address,string)\":{\"notice\":\"Assign cleaner to neighborhood (by admin or owner)\"},\"assignNeighborhoodAdmin(string,address)\":{\"notice\":\"Assign or change neighborhood admin\"},\"batchAssignCleanersToNeighborhood(address[],string)\":{\"notice\":\"Batch assign multiple cleaners to a neighborhood\"},\"batchRemoveCleanersFromNeighborhood(address[],string)\":{\"notice\":\"Batch remove multiple cleaners from a neighborhood\"},\"confirmGarbageCollection(uint256,bytes32,string)\":{\"notice\":\"Confirm garbage collection by house with validation\"},\"getAllNeighborhoods()\":{\"notice\":\"Get all registered neighborhoods\"},\"getAllRegisteredCleaners()\":{\"notice\":\"Get all registered cleaner addresses\"},\"getAllRegisteredHouses()\":{\"notice\":\"Get all registered house addresses\"},\"getCleaner(address)\":{\"notice\":\"Get cleaner information by address\"},\"getCleanerCollectionEvents(address)\":{\"notice\":\"Get all collection events for a specific cleaner (DEPRECATED - use paginated version)\"},\"getCleanerCollectionEventsPaginated(address,uint256,uint256)\":{\"notice\":\"Get collection events for a cleaner with pagination to avoid gas issues\"},\"getCleanerCollectionStats(address)\":{\"notice\":\"Get collection statistics for a cleaner\"},\"getCleanerNeighborhoods(address)\":{\"notice\":\"Get neighborhoods assigned to a cleaner\"},\"getCleanersInNeighborhood(string)\":{\"notice\":\"Get all cleaners in a neighborhood\"},\"getCollectionEvent(uint256)\":{\"notice\":\"Get collection event details by ID\"},\"getHouse(address)\":{\"notice\":\"Get house information by address\"},\"getHouseCollectionEvents(address)\":{\"notice\":\"Get all collection events for a specific house (DEPRECATED - use paginated version)\"},\"getHouseCollectionEventsPaginated(address,uint256,uint256)\":{\"notice\":\"Get collection events for a house with pagination to avoid gas issues\"},\"getHouseCollectionStats(address)\":{\"notice\":\"Get collection statistics for a house\"},\"getHousesInNeighborhood(string)\":{\"notice\":\"Get all houses in a neighborhood\"},\"getNeighborhood(string)\":{\"notice\":\"Get neighborhood information\"},\"getNeighborhoodStats(string)\":{\"notice\":\"Get neighborhood statistics\"},\"getTotalCleaners()\":{\"notice\":\"Get total number of registered cleaners\"},\"getTotalHouses()\":{\"notice\":\"Get total number of registered houses\"},\"getTotalNeighborhoods()\":{\"notice\":\"Get total number of registered neighborhoods\"},\"isCleanerAlreadyAssigned(address,string)\":{\"notice\":\"FIXED: Check for duplicate cleaner assignment more efficiently\"},\"isCleanerAuthorized(address,string)\":{\"notice\":\"Check if cleaner is authorized in neighborhood\"},\"isNeighborhoodAdmin(address)\":{\"notice\":\"Check if address is a neighborhood admin\"},\"isPaused()\":{\"notice\":\"Get contract pause status\"},\"isRegisteredCleaner(address)\":{\"notice\":\"Check if an address is a registered cleaner\"},\"isRegisteredHouse(address)\":{\"notice\":\"Check if an address is a registered house\"},\"logGarbageCollection(address,bytes32,string)\":{\"notice\":\"Log garbage collection by cleaner with image proof\"},\"pauseContract(bool)\":{\"notice\":\"Pause or unpause the contract (emergency function)\"},\"registerCleaner()\":{\"notice\":\"Register a cleaner with wallet public key\"},\"registerHouse(string,uint8)\":{\"notice\":\"Register a house with wallet public key and metadata\"},\"registerNeighborhood(string,string,address)\":{\"notice\":\"Register a new neighborhood with admin\"},\"removeCleanerFromNeighborhood(address,string)\":{\"notice\":\"Remove cleaner from neighborhood\"},\"setNeighborhoodStatus(string,bool)\":{\"notice\":\"Activate or deactivate a neighborhood\"},\"updateCleanerReputation(address,uint256)\":{\"notice\":\"Update cleaner reputation (only owner)\"},\"updateHousePoints(address,uint256)\":{\"notice\":\"Update house points (only owner)\"},\"validateNeighborhoodExists(string)\":{\"notice\":\"FIXED: Validate that a neighborhood exists before operations\"}},\"notice\":\"CleanChain - Decentralized Garbage Collection Verification Platform A smart contract for tracking, verifying, and incentivizing neighborhood garbage collection\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CleanChain.sol\":\"CleanChain\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/CleanChain.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Useful for debugging. Remove when deploying to a live network.\\n// import \\\"hardhat/console.sol\\\"; // REMOVED: console.log not needed in production\\n\\n/**\\n * CleanChain - Decentralized Garbage Collection Verification Platform\\n * A smart contract for tracking, verifying, and incentivizing neighborhood garbage collection\\n * @author CleanChain Team\\n */\\ncontract CleanChain {\\n    // State Variables\\n    address public immutable owner;\\n    uint256 public totalHouses = 0;\\n    uint256 public totalCleaners = 0;\\n    uint256 public totalCollectionEvents = 0;\\n    uint256 public totalComplaints = 0;\\n\\n    // Data Structures as defined in PRD\\n    struct House {\\n        address wallet;\\n        uint256 points;\\n        string neighborhood;\\n        uint8 residents;\\n        bytes32[] collectionHashes;\\n        bool isRegistered;\\n        uint256 registrationTimestamp;\\n    }\\n\\n    struct Cleaner {\\n        address wallet;\\n        uint256 points;\\n        uint256 reputation;\\n        bytes32[] collectionHashes;\\n        bool isRegistered;\\n        uint256 registrationTimestamp;\\n        string[] assignedNeighborhoods; // Neighborhoods where cleaner is authorized\\n    }\\n\\n    struct CollectionEvent {\\n        address cleaner;\\n        address house;\\n        uint256 timestamp;\\n        bytes32 imageHash;\\n        string imageURI;\\n        bool confirmedByHouse;\\n        uint256 eventId;\\n    }\\n\\n    struct Complaint {\\n        address reporter;\\n        bytes32 imageHash;\\n        string imageURI;\\n        string location;\\n        string neighborhood;\\n        address[] validators;\\n        uint8 status; // 0 = PENDING, 1 = VALIDATED, 2 = INVALID\\n        uint256 timestamp;\\n        uint256 complaintId;\\n    }\\n\\n    struct Neighborhood {\\n        string name;\\n        string description;\\n        address admin;\\n        bool isActive;\\n        uint256 registrationTimestamp;\\n        uint256 totalHouses;\\n        uint256 totalCleaners;\\n        uint256 totalCollections;\\n        uint256 confirmedCollections;\\n    }\\n\\n    // Mappings\\n    mapping(address => House) public houses;\\n    mapping(address => Cleaner) public cleaners;\\n    mapping(uint256 => CollectionEvent) public collectionEvents;\\n    mapping(uint256 => Complaint) public complaints;\\n    mapping(string => address[]) public neighborhoodHouses; // neighborhood => array of house addresses\\n    mapping(string => address[]) public neighborhoodCleaners; // neighborhood => array of cleaner addresses\\n    mapping(string => Neighborhood) public neighborhoods; // neighborhood name => Neighborhood struct\\n    mapping(address => bool) public neighborhoodAdmins; // address => is neighborhood admin\\n    mapping(string => mapping(address => bool)) public cleanerNeighborhoodAccess; // neighborhood => cleaner => authorized\\n\\n    // Arrays for enumeration\\n    address[] public registeredHouses;\\n    address[] public registeredCleaners;\\n    string[] public registeredNeighborhoods;\\n\\n    // Contract state\\n    bool public contractPaused = false;\\n\\n    // Events\\n    event HouseRegistered(address indexed wallet, string neighborhood, uint8 residents, uint256 timestamp);\\n    event CleanerRegistered(address indexed wallet, uint256 timestamp);\\n    event CollectionEventCreated(\\n        uint256 indexed eventId,\\n        address indexed cleaner,\\n        address indexed house,\\n        bytes32 imageHash,\\n        uint256 timestamp\\n    );\\n    event CollectionEventConfirmed(uint256 indexed eventId, address indexed house);\\n    event ComplaintCreated(\\n        uint256 indexed complaintId,\\n        address indexed reporter,\\n        string location,\\n        string neighborhood,\\n        bytes32 imageHash\\n    );\\n    event PointsAwarded(address indexed recipient, uint256 points, string reason);\\n    event NeighborhoodRegistered(string indexed neighborhoodName, address indexed admin, uint256 timestamp);\\n    event NeighborhoodAdminAssigned(string indexed neighborhoodName, address indexed admin);\\n    event CleanerAssignedToNeighborhood(address indexed cleaner, string neighborhoodName);\\n    event CleanerRemovedFromNeighborhood(address indexed cleaner, string neighborhoodName);\\n    event ContractPaused(bool paused);\\n    event NeighborhoodStatusChanged(string indexed neighborhoodName, bool isActive);\\n\\n    // Constructor\\n    constructor(address _owner) {\\n        owner = _owner;\\n        // console.log(\\\"CleanChain contract deployed by:\\\", _owner); // REMOVED\\n    }\\n\\n    // Modifiers\\n    modifier isOwner() {\\n        require(msg.sender == owner, \\\"Not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyRegisteredHouse() {\\n        require(houses[msg.sender].isRegistered, \\\"House not registered\\\");\\n        _;\\n    }\\n\\n    modifier onlyRegisteredCleaner() {\\n        require(cleaners[msg.sender].isRegistered, \\\"Cleaner not registered\\\");\\n        _;\\n    }\\n\\n    modifier validNeighborhood(string memory _neighborhood) {\\n        require(bytes(_neighborhood).length > 0, \\\"Neighborhood cannot be empty\\\");\\n        require(neighborhoods[_neighborhood].isActive, \\\"Neighborhood not active or doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier validResidents(uint8 _residents) {\\n        require(_residents > 0 && _residents <= 20, \\\"Invalid number of residents\\\");\\n        _;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!contractPaused, \\\"Contract is paused\\\");\\n        _;\\n    }\\n\\n    modifier onlyNeighborhoodAdmin(string memory _neighborhood) {\\n        require(\\n            msg.sender == owner || \\n            (neighborhoods[_neighborhood].admin == msg.sender && neighborhoodAdmins[msg.sender]),\\n            \\\"Not authorized neighborhood admin\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier cleanerAuthorizedInNeighborhood(address _cleaner, string memory _neighborhood) {\\n        require(\\n            cleanerNeighborhoodAccess[_neighborhood][_cleaner] || \\n            neighborhoods[_neighborhood].admin == _cleaner,\\n            \\\"Cleaner not authorized in this neighborhood\\\"\\n        );\\n        _;\\n    }\\n\\n    // Neighborhood Management Functions\\n    /**\\n     * Register a new neighborhood with admin\\n     * @param _name Name of the neighborhood\\n     * @param _description Description of the neighborhood\\n     * @param _admin Address of the neighborhood admin\\n     */\\n    function registerNeighborhood(\\n        string memory _name,\\n        string memory _description,\\n        address _admin\\n    ) \\n        external \\n        isOwner\\n        whenNotPaused\\n    {\\n        require(bytes(_name).length > 0, \\\"Neighborhood name cannot be empty\\\");\\n        require(bytes(_description).length > 0, \\\"Description cannot be empty\\\");\\n        require(_admin != address(0), \\\"Invalid admin address\\\");\\n        require(bytes(neighborhoods[_name].name).length == 0, \\\"Neighborhood already exists\\\"); // FIXED: Proper check for existing neighborhood\\n        \\n        // Create new neighborhood\\n        Neighborhood storage newNeighborhood = neighborhoods[_name];\\n        newNeighborhood.name = _name;\\n        newNeighborhood.description = _description;\\n        newNeighborhood.admin = _admin;\\n        newNeighborhood.isActive = true;\\n        newNeighborhood.registrationTimestamp = block.timestamp;\\n        \\n        // Set admin permissions\\n        neighborhoodAdmins[_admin] = true;\\n        \\n        // Add to enumeration array\\n        registeredNeighborhoods.push(_name);\\n        \\n        // console.log(\\\"Neighborhood registered:\\\", _name, \\\"with admin:\\\", _admin); // REMOVED\\n        emit NeighborhoodRegistered(_name, _admin, block.timestamp);\\n    }\\n\\n    /**\\n     * Assign or change neighborhood admin\\n     * @param _neighborhood Name of the neighborhood\\n     * @param _newAdmin Address of the new admin\\n     */\\n    function assignNeighborhoodAdmin(\\n        string memory _neighborhood,\\n        address _newAdmin\\n    ) \\n        external \\n        isOwner\\n        whenNotPaused\\n    {\\n        require(neighborhoods[_neighborhood].isActive, \\\"Neighborhood doesn't exist\\\");\\n        require(_newAdmin != address(0), \\\"Invalid admin address\\\");\\n        \\n        address oldAdmin = neighborhoods[_neighborhood].admin;\\n        \\n        // FIXED: Only remove admin permissions if they're not admin of other neighborhoods\\n        if (oldAdmin != _newAdmin && oldAdmin != owner) {\\n            bool isAdminOfOtherNeighborhoods = false;\\n            for (uint256 i = 0; i < registeredNeighborhoods.length; i++) {\\n                string memory neighName = registeredNeighborhoods[i];\\n                if (keccak256(abi.encodePacked(neighName)) != keccak256(abi.encodePacked(_neighborhood)) &&\\n                    neighborhoods[neighName].admin == oldAdmin) {\\n                    isAdminOfOtherNeighborhoods = true;\\n                    break;\\n                }\\n            }\\n            if (!isAdminOfOtherNeighborhoods) {\\n                neighborhoodAdmins[oldAdmin] = false;\\n            }\\n        }\\n        \\n        // Set new admin\\n        neighborhoods[_neighborhood].admin = _newAdmin;\\n        neighborhoodAdmins[_newAdmin] = true;\\n        \\n        emit NeighborhoodAdminAssigned(_neighborhood, _newAdmin);\\n    }\\n\\n    /**\\n     * Activate or deactivate a neighborhood\\n     * @param _neighborhood Name of the neighborhood\\n     * @param _isActive New status for the neighborhood\\n     */\\n    function setNeighborhoodStatus(\\n        string memory _neighborhood,\\n        bool _isActive\\n    ) \\n        external \\n        onlyNeighborhoodAdmin(_neighborhood)\\n        whenNotPaused\\n    {\\n        require(bytes(neighborhoods[_neighborhood].name).length > 0, \\\"Neighborhood doesn't exist\\\");\\n        neighborhoods[_neighborhood].isActive = _isActive;\\n        \\n        emit NeighborhoodStatusChanged(_neighborhood, _isActive);\\n    }\\n\\n    /**\\n     * Assign cleaner to neighborhood (by admin or owner)\\n     * @param _cleaner Address of the cleaner\\n     * @param _neighborhood Name of the neighborhood\\n     */\\n    function assignCleanerToNeighborhood(\\n        address _cleaner,\\n        string memory _neighborhood\\n    ) \\n        external \\n        onlyNeighborhoodAdmin(_neighborhood)\\n        whenNotPaused\\n    {\\n        require(cleaners[_cleaner].isRegistered, \\\"Cleaner not registered\\\");\\n        require(neighborhoods[_neighborhood].isActive, \\\"Neighborhood not active\\\");\\n        require(!cleanerNeighborhoodAccess[_neighborhood][_cleaner], \\\"Cleaner already assigned\\\");\\n        \\n        cleanerNeighborhoodAccess[_neighborhood][_cleaner] = true;\\n        cleaners[_cleaner].assignedNeighborhoods.push(_neighborhood);\\n        neighborhoodCleaners[_neighborhood].push(_cleaner);\\n        neighborhoods[_neighborhood].totalCleaners++;\\n        \\n        emit CleanerAssignedToNeighborhood(_cleaner, _neighborhood);\\n    }\\n\\n    /**\\n     * Remove cleaner from neighborhood\\n     * @param _cleaner Address of the cleaner\\n     * @param _neighborhood Name of the neighborhood\\n     */\\n    function removeCleanerFromNeighborhood(\\n        address _cleaner,\\n        string memory _neighborhood\\n    ) \\n        external \\n        onlyNeighborhoodAdmin(_neighborhood)\\n        whenNotPaused\\n    {\\n        require(cleanerNeighborhoodAccess[_neighborhood][_cleaner], \\\"Cleaner not assigned to neighborhood\\\");\\n        \\n        cleanerNeighborhoodAccess[_neighborhood][_cleaner] = false;\\n        \\n        // Remove from cleaner's assigned neighborhoods array\\n        string[] storage assigned = cleaners[_cleaner].assignedNeighborhoods;\\n        for (uint256 i = 0; i < assigned.length; i++) {\\n            if (keccak256(abi.encodePacked(assigned[i])) == keccak256(abi.encodePacked(_neighborhood))) {\\n                assigned[i] = assigned[assigned.length - 1];\\n                assigned.pop();\\n                break;\\n            }\\n        }\\n        \\n        // FIXED: Remove from neighborhood cleaners array\\n        address[] storage neighborhoodCleanersList = neighborhoodCleaners[_neighborhood];\\n        for (uint256 i = 0; i < neighborhoodCleanersList.length; i++) {\\n            if (neighborhoodCleanersList[i] == _cleaner) {\\n                neighborhoodCleanersList[i] = neighborhoodCleanersList[neighborhoodCleanersList.length - 1];\\n                neighborhoodCleanersList.pop();\\n                break;\\n            }\\n        }\\n        \\n        neighborhoods[_neighborhood].totalCleaners--;\\n        \\n        emit CleanerRemovedFromNeighborhood(_cleaner, _neighborhood);\\n    }\\n\\n    // House Registration Functions\\n    /**\\n     * Register a house with wallet public key and metadata\\n     * @param _neighborhood The neighborhood where the house is located\\n     * @param _residents Number of residents in the house\\n     */\\n    function registerHouse(\\n        string memory _neighborhood,\\n        uint8 _residents\\n    ) \\n        external \\n        validNeighborhood(_neighborhood)\\n        validResidents(_residents)\\n        whenNotPaused\\n    {\\n        require(!houses[msg.sender].isRegistered, \\\"House already registered\\\");\\n        \\n        // Create new house\\n        House storage newHouse = houses[msg.sender];\\n        newHouse.wallet = msg.sender;\\n        newHouse.points = 0;\\n        newHouse.neighborhood = _neighborhood;\\n        newHouse.residents = _residents;\\n        newHouse.isRegistered = true;\\n        newHouse.registrationTimestamp = block.timestamp;\\n\\n        // Add to arrays for enumeration\\n        registeredHouses.push(msg.sender);\\n        neighborhoodHouses[_neighborhood].push(msg.sender);\\n        \\n        // Update neighborhood statistics\\n        neighborhoods[_neighborhood].totalHouses++;\\n        \\n        // Increment counter\\n        totalHouses++;\\n\\n        // Award registration points\\n        awardPoints(msg.sender, 10, \\\"House Registration\\\");\\n\\n        // console.log(\\\"House registered:\\\", msg.sender, \\\"in neighborhood:\\\", _neighborhood); // REMOVED\\n        emit HouseRegistered(msg.sender, _neighborhood, _residents, block.timestamp);\\n    }\\n\\n    /**\\n     * Register a cleaner with wallet public key\\n     */\\n    function registerCleaner() external whenNotPaused {\\n        require(!cleaners[msg.sender].isRegistered, \\\"Cleaner already registered\\\");\\n        require(!houses[msg.sender].isRegistered, \\\"Address already registered as house\\\");\\n        \\n        // Create new cleaner\\n        Cleaner storage newCleaner = cleaners[msg.sender];\\n        newCleaner.wallet = msg.sender;\\n        newCleaner.points = 0;\\n        newCleaner.reputation = 100; // Start with base reputation\\n        newCleaner.isRegistered = true;\\n        newCleaner.registrationTimestamp = block.timestamp;\\n\\n        // Add to array for enumeration\\n        registeredCleaners.push(msg.sender);\\n        \\n        // Increment counter\\n        totalCleaners++;\\n\\n        // Award registration points\\n        awardPoints(msg.sender, 10, \\\"Cleaner Registration\\\");\\n\\n        // console.log(\\\"Cleaner registered:\\\", msg.sender); // REMOVED\\n        emit CleanerRegistered(msg.sender, block.timestamp);\\n    }\\n\\n    // Collection Event Functions\\n    /**\\n     * Log garbage collection by cleaner with image proof\\n     * @param _houseAddress Address of the house where garbage was collected\\n     * @param _imageHash Hash of the image taken as proof of collection\\n     * @param _imageURI URI pointing to the off-chain stored image\\n     */\\n    function logGarbageCollection(\\n        address _houseAddress,\\n        bytes32 _imageHash,\\n        string memory _imageURI\\n    ) \\n        external \\n        onlyRegisteredCleaner\\n        whenNotPaused\\n    {\\n        require(houses[_houseAddress].isRegistered, \\\"House not registered\\\");\\n        require(_imageHash != bytes32(0), \\\"Image hash cannot be empty\\\");\\n        require(bytes(_imageURI).length > 0, \\\"Image URI cannot be empty\\\");\\n        \\n        string memory houseNeighborhood = houses[_houseAddress].neighborhood;\\n        \\n        // Check if cleaner is authorized in this neighborhood\\n        require(\\n            cleanerNeighborhoodAccess[houseNeighborhood][msg.sender] ||\\n            neighborhoods[houseNeighborhood].admin == msg.sender ||\\n            msg.sender == owner,\\n            \\\"Cleaner not authorized in this neighborhood\\\"\\n        );\\n        \\n        // Create new collection event\\n        uint256 eventId = totalCollectionEvents;\\n        CollectionEvent storage newEvent = collectionEvents[eventId];\\n        newEvent.cleaner = msg.sender;\\n        newEvent.house = _houseAddress;\\n        newEvent.timestamp = block.timestamp;\\n        newEvent.imageHash = _imageHash;\\n        newEvent.imageURI = _imageURI;\\n        newEvent.confirmedByHouse = false;\\n        newEvent.eventId = eventId;\\n\\n        // Add hash to cleaner's collection history\\n        cleaners[msg.sender].collectionHashes.push(_imageHash);\\n        \\n        // Update neighborhood statistics\\n        neighborhoods[houseNeighborhood].totalCollections++;\\n        \\n        // Increment counter\\n        totalCollectionEvents++;\\n\\n        // Award points to cleaner\\n        awardPoints(msg.sender, 20, \\\"Garbage Collection\\\");\\n\\n        // console.log(\\\"Garbage collection logged by cleaner:\\\", msg.sender, \\\"at house:\\\", _houseAddress); // REMOVED\\n        emit CollectionEventCreated(eventId, msg.sender, _houseAddress, _imageHash, block.timestamp);\\n    }\\n\\n    /**\\n     * Confirm garbage collection by house with validation\\n     * @param _eventId ID of the collection event to confirm\\n     * @param _imageHash Hash of the validation image taken by the house\\n     * @param _imageURI URI pointing to the house's validation image\\n     */\\n    function confirmGarbageCollection(\\n        uint256 _eventId,\\n        bytes32 _imageHash,\\n        string memory _imageURI\\n    ) \\n        external \\n        onlyRegisteredHouse\\n        whenNotPaused\\n    {\\n        require(_eventId < totalCollectionEvents, \\\"Invalid event ID\\\");\\n        require(_imageHash != bytes32(0), \\\"Image hash cannot be empty\\\");\\n        require(bytes(_imageURI).length > 0, \\\"Image URI cannot be empty\\\");\\n        \\n        CollectionEvent storage collectionEvent = collectionEvents[_eventId];\\n        require(collectionEvent.house == msg.sender, \\\"Not authorized to confirm this event\\\");\\n        require(!collectionEvent.confirmedByHouse, \\\"Event already confirmed\\\");\\n        \\n        // Confirm the event\\n        collectionEvent.confirmedByHouse = true;\\n        \\n        // FIXED: Only add the house's validation hash, not the cleaner's proof hash\\n        houses[msg.sender].collectionHashes.push(_imageHash);\\n        \\n        // Update neighborhood statistics\\n        string memory houseNeighborhood = houses[msg.sender].neighborhood;\\n        neighborhoods[houseNeighborhood].confirmedCollections++;\\n        \\n        // Award bonus points to both cleaner and house for confirmed collection\\n        awardPoints(collectionEvent.cleaner, 10, \\\"Confirmed Collection Bonus\\\");\\n        awardPoints(msg.sender, 15, \\\"Collection Validation\\\");\\n        \\n        // Increase cleaner's reputation for confirmed work\\n        cleaners[collectionEvent.cleaner].reputation += 5;\\n\\n        emit CollectionEventConfirmed(_eventId, msg.sender);\\n    }\\n\\n    /**\\n     * Get collection event details by ID\\n     * @param _eventId ID of the collection event\\n     * @return CollectionEvent struct containing event details\\n     */\\n    function getCollectionEvent(uint256 _eventId) external view returns (CollectionEvent memory) {\\n        require(_eventId < totalCollectionEvents, \\\"Invalid event ID\\\");\\n        return collectionEvents[_eventId];\\n    }\\n\\n    /**\\n     * Get collection events for a house with pagination to avoid gas issues\\n     * @param _houseAddress Address of the house\\n     * @param _offset Starting index for pagination\\n     * @param _limit Maximum number of events to return\\n     * @return Array of event IDs for the house\\n     * @return Total count of events for this house\\n     */\\n    function getHouseCollectionEventsPaginated(\\n        address _houseAddress, \\n        uint256 _offset, \\n        uint256 _limit\\n    ) external view returns (uint256[] memory, uint256) {\\n        require(houses[_houseAddress].isRegistered, \\\"House not registered\\\");\\n        require(_limit > 0 && _limit <= 100, \\\"Invalid limit: must be between 1 and 100\\\");\\n        \\n        // Count total events first\\n        uint256 totalCount = 0;\\n        for (uint256 i = 0; i < totalCollectionEvents; i++) {\\n            if (collectionEvents[i].house == _houseAddress) {\\n                totalCount++;\\n            }\\n        }\\n        \\n        if (_offset >= totalCount) {\\n            return (new uint256[](0), totalCount);\\n        }\\n        \\n        uint256 resultSize = _limit;\\n        if (_offset + _limit > totalCount) {\\n            resultSize = totalCount - _offset;\\n        }\\n        \\n        uint256[] memory eventIds = new uint256[](resultSize);\\n        uint256 currentIndex = 0;\\n        uint256 matchedCount = 0;\\n        \\n        for (uint256 i = 0; i < totalCollectionEvents && currentIndex < resultSize; i++) {\\n            if (collectionEvents[i].house == _houseAddress) {\\n                if (matchedCount >= _offset) {\\n                    eventIds[currentIndex] = i;\\n                    currentIndex++;\\n                }\\n                matchedCount++;\\n            }\\n        }\\n        \\n        return (eventIds, totalCount);\\n    }\\n\\n    /**\\n     * Get collection events for a cleaner with pagination to avoid gas issues\\n     * @param _cleanerAddress Address of the cleaner\\n     * @param _offset Starting index for pagination\\n     * @param _limit Maximum number of events to return\\n     * @return Array of event IDs for the cleaner\\n     * @return Total count of events for this cleaner\\n     */\\n    function getCleanerCollectionEventsPaginated(\\n        address _cleanerAddress, \\n        uint256 _offset, \\n        uint256 _limit\\n    ) external view returns (uint256[] memory, uint256) {\\n        require(cleaners[_cleanerAddress].isRegistered, \\\"Cleaner not registered\\\");\\n        require(_limit > 0 && _limit <= 100, \\\"Invalid limit: must be between 1 and 100\\\");\\n        \\n        // Count total events first\\n        uint256 totalCount = 0;\\n        for (uint256 i = 0; i < totalCollectionEvents; i++) {\\n            if (collectionEvents[i].cleaner == _cleanerAddress) {\\n                totalCount++;\\n            }\\n        }\\n        \\n        if (_offset >= totalCount) {\\n            return (new uint256[](0), totalCount);\\n        }\\n        \\n        uint256 resultSize = _limit;\\n        if (_offset + _limit > totalCount) {\\n            resultSize = totalCount - _offset;\\n        }\\n        \\n        uint256[] memory eventIds = new uint256[](resultSize);\\n        uint256 currentIndex = 0;\\n        uint256 matchedCount = 0;\\n        \\n        for (uint256 i = 0; i < totalCollectionEvents && currentIndex < resultSize; i++) {\\n            if (collectionEvents[i].cleaner == _cleanerAddress) {\\n                if (matchedCount >= _offset) {\\n                    eventIds[currentIndex] = i;\\n                    currentIndex++;\\n                }\\n                matchedCount++;\\n            }\\n        }\\n        \\n        return (eventIds, totalCount);\\n    }\\n\\n    /**\\n     * Get collection statistics for a house\\n     * @param _houseAddress Address of the house\\n     * @return totalEvents Total collection events for the house\\n     * @return confirmedEvents Number of confirmed collection events\\n     * @return pendingEvents Number of pending (unconfirmed) collection events\\n     */\\n    function getHouseCollectionStats(address _houseAddress) \\n        external \\n        view \\n        returns (uint256 totalEvents, uint256 confirmedEvents, uint256 pendingEvents) \\n    {\\n        require(houses[_houseAddress].isRegistered, \\\"House not registered\\\");\\n        \\n        for (uint256 i = 0; i < totalCollectionEvents; i++) {\\n            if (collectionEvents[i].house == _houseAddress) {\\n                totalEvents++;\\n                if (collectionEvents[i].confirmedByHouse) {\\n                    confirmedEvents++;\\n                } else {\\n                    pendingEvents++;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get collection statistics for a cleaner\\n     * @param _cleanerAddress Address of the cleaner\\n     * @return totalEvents Total collection events by the cleaner\\n     * @return confirmedEvents Number of confirmed collection events\\n     * @return confirmationRate Percentage of confirmed collections (0-100)\\n     */\\n    function getCleanerCollectionStats(address _cleanerAddress) \\n        external \\n        view \\n        returns (uint256 totalEvents, uint256 confirmedEvents, uint256 confirmationRate) \\n    {\\n        require(cleaners[_cleanerAddress].isRegistered, \\\"Cleaner not registered\\\");\\n        \\n        for (uint256 i = 0; i < totalCollectionEvents; i++) {\\n            if (collectionEvents[i].cleaner == _cleanerAddress) {\\n                totalEvents++;\\n                if (collectionEvents[i].confirmedByHouse) {\\n                    confirmedEvents++;\\n                }\\n            }\\n        }\\n        \\n        if (totalEvents > 0) {\\n            confirmationRate = (confirmedEvents * 100) / totalEvents;\\n        }\\n    }\\n\\n    // Neighborhood Query Functions\\n    /**\\n     * Get neighborhood information\\n     * @param _neighborhood Name of the neighborhood\\n     * @return Neighborhood struct containing all neighborhood information\\n     */\\n    function getNeighborhood(string memory _neighborhood) external view returns (Neighborhood memory) {\\n        require(bytes(neighborhoods[_neighborhood].name).length > 0, \\\"Neighborhood doesn't exist\\\");\\n        return neighborhoods[_neighborhood];\\n    }\\n\\n    /**\\n     * Get all registered neighborhoods\\n     * @return Array of neighborhood names\\n     */\\n    function getAllNeighborhoods() external view returns (string[] memory) {\\n        return registeredNeighborhoods;\\n    }\\n\\n    /**\\n     * Get neighborhoods assigned to a cleaner\\n     * @param _cleanerAddress Address of the cleaner\\n     * @return Array of neighborhood names where cleaner is authorized\\n     */\\n    function getCleanerNeighborhoods(address _cleanerAddress) external view returns (string[] memory) {\\n        require(cleaners[_cleanerAddress].isRegistered, \\\"Cleaner not registered\\\");\\n        return cleaners[_cleanerAddress].assignedNeighborhoods;\\n    }\\n\\n    /**\\n     * Check if cleaner is authorized in neighborhood\\n     * @param _cleaner Address of the cleaner\\n     * @param _neighborhood Name of the neighborhood\\n     * @return Boolean indicating if cleaner is authorized\\n     */\\n    function isCleanerAuthorized(address _cleaner, string memory _neighborhood) external view returns (bool) {\\n        return cleanerNeighborhoodAccess[_neighborhood][_cleaner] || \\n               neighborhoods[_neighborhood].admin == _cleaner ||\\n               _cleaner == owner;\\n    }\\n\\n    /**\\n     * Check if address is a neighborhood admin\\n     * @param _address Address to check\\n     * @return Boolean indicating if address is a neighborhood admin\\n     */\\n    function isNeighborhoodAdmin(address _address) external view returns (bool) {\\n        return neighborhoodAdmins[_address] || _address == owner;\\n    }\\n\\n    /**\\n     * Get neighborhood statistics\\n     * @param _neighborhood Name of the neighborhood\\n     * @return totalHouses Number of houses in neighborhood\\n     * @return totalCleaners Number of cleaners assigned to neighborhood\\n     * @return totalCollections Total collection events in neighborhood\\n     * @return confirmedCollections Number of confirmed collections\\n     * @return confirmationRate Percentage of confirmed collections (0-100)\\n     */\\n    function getNeighborhoodStats(string memory _neighborhood) \\n        external \\n        view \\n        returns (\\n            uint256 totalHouses,\\n            uint256 totalCleaners,\\n            uint256 totalCollections,\\n            uint256 confirmedCollections,\\n            uint256 confirmationRate\\n        ) \\n    {\\n        require(bytes(neighborhoods[_neighborhood].name).length > 0, \\\"Neighborhood doesn't exist\\\");\\n        \\n        Neighborhood memory neighborhood = neighborhoods[_neighborhood];\\n        totalHouses = neighborhood.totalHouses;\\n        totalCleaners = neighborhood.totalCleaners;\\n        totalCollections = neighborhood.totalCollections;\\n        confirmedCollections = neighborhood.confirmedCollections;\\n        \\n        if (totalCollections > 0) {\\n            confirmationRate = (confirmedCollections * 100) / totalCollections;\\n        }\\n    }\\n\\n    // Utility Functions\\n    /**\\n     * Award points to a user and emit event\\n     * @param _recipient Address to receive points\\n     * @param _points Number of points to award\\n     * @param _reason Reason for awarding points\\n     */\\n    function awardPoints(address _recipient, uint256 _points, string memory _reason) internal {\\n        if (houses[_recipient].isRegistered) {\\n            houses[_recipient].points += _points;\\n        } else if (cleaners[_recipient].isRegistered) {\\n            cleaners[_recipient].points += _points;\\n        }\\n        \\n        emit PointsAwarded(_recipient, _points, _reason);\\n    }\\n\\n    // View Functions\\n    /**\\n     * Get house information by address\\n     * @param _houseAddress Address of the house\\n     * @return House struct containing all house information\\n     */\\n    function getHouse(address _houseAddress) external view returns (House memory) {\\n        require(houses[_houseAddress].isRegistered, \\\"House not registered\\\");\\n        return houses[_houseAddress];\\n    }\\n\\n    /**\\n     * Get cleaner information by address\\n     * @param _cleanerAddress Address of the cleaner\\n     * @return Cleaner struct containing all cleaner information\\n     */\\n    function getCleaner(address _cleanerAddress) external view returns (Cleaner memory) {\\n        require(cleaners[_cleanerAddress].isRegistered, \\\"Cleaner not registered\\\");\\n        return cleaners[_cleanerAddress];\\n    }\\n\\n    /**\\n     * Get all houses in a neighborhood\\n     * @param _neighborhood Name of the neighborhood\\n     * @return Array of house addresses in the neighborhood\\n     */\\n    function getHousesInNeighborhood(string memory _neighborhood) external view returns (address[] memory) {\\n        return neighborhoodHouses[_neighborhood];\\n    }\\n\\n    /**\\n     * Get all cleaners in a neighborhood\\n     * @param _neighborhood Name of the neighborhood\\n     * @return Array of cleaner addresses in the neighborhood\\n     */\\n    function getCleanersInNeighborhood(string memory _neighborhood) external view returns (address[] memory) {\\n        return neighborhoodCleaners[_neighborhood];\\n    }\\n\\n    /**\\n     * Get total number of registered houses\\n     * @return Total number of houses\\n     */\\n    function getTotalHouses() external view returns (uint256) {\\n        return totalHouses;\\n    }\\n\\n    /**\\n     * Get total number of registered cleaners\\n     * @return Total number of cleaners\\n     */\\n    function getTotalCleaners() external view returns (uint256) {\\n    \\n        return totalCleaners;\\n    }\\n\\n    /**\\n     * Check if an address is a registered house\\n     * @param _address Address to check\\n     * @return Boolean indicating if address is a registered house\\n     */\\n    function isRegisteredHouse(address _address) external view returns (bool) {\\n        return houses[_address].isRegistered;\\n    }\\n\\n    /**\\n     * Check if an address is a registered cleaner\\n     * @param _address Address to check\\n     * @return Boolean indicating if address is a registered cleaner\\n     */\\n    function isRegisteredCleaner(address _address) external view returns (bool) {\\n        return cleaners[_address].isRegistered;\\n    }\\n\\n    /**\\n     * Get all registered house addresses\\n     * @return Array of all registered house addresses\\n     */\\n    function getAllRegisteredHouses() external view returns (address[] memory) {\\n        return registeredHouses;\\n    }\\n\\n    /**\\n     * Get all registered cleaner addresses\\n     * @return Array of all registered cleaner addresses\\n     */\\n    function getAllRegisteredCleaners() external view returns (address[] memory) {\\n        return registeredCleaners;\\n    }\\n\\n    // Owner Functions\\n    /**\\n     * Update house points (only owner)\\n     * @param _houseAddress Address of the house\\n     * @param _points New points value\\n     */\\n    function updateHousePoints(address _houseAddress, uint256 _points) external isOwner {\\n        require(houses[_houseAddress].isRegistered, \\\"House not registered\\\");\\n        houses[_houseAddress].points = _points;\\n    }\\n\\n    /**\\n     * Update cleaner reputation (only owner)\\n     * @param _cleanerAddress Address of the cleaner\\n     * @param _reputation New reputation value\\n     */\\n    function updateCleanerReputation(address _cleanerAddress, uint256 _reputation) external isOwner {\\n        require(cleaners[_cleanerAddress].isRegistered, \\\"Cleaner not registered\\\");\\n        cleaners[_cleanerAddress].reputation = _reputation;\\n    }\\n\\n    // Administrative Functions\\n    /**\\n     * Pause or unpause the contract (emergency function)\\n     * @param _paused New pause state\\n     */\\n    function pauseContract(bool _paused) external isOwner {\\n        contractPaused = _paused;\\n        emit ContractPaused(_paused);\\n    }\\n\\n    /**\\n     * Batch assign multiple cleaners to a neighborhood\\n     * @param _cleaners Array of cleaner addresses\\n     * @param _neighborhood Name of the neighborhood\\n     */\\n    function batchAssignCleanersToNeighborhood(\\n        address[] memory _cleaners,\\n        string memory _neighborhood\\n    ) \\n        external \\n        onlyNeighborhoodAdmin(_neighborhood)\\n        whenNotPaused\\n    {\\n        require(_cleaners.length > 0, \\\"No cleaners provided\\\");\\n        require(neighborhoods[_neighborhood].isActive, \\\"Neighborhood not active\\\");\\n        \\n        for (uint256 i = 0; i < _cleaners.length; i++) {\\n            address cleaner = _cleaners[i];\\n            if (cleaners[cleaner].isRegistered && !cleanerNeighborhoodAccess[_neighborhood][cleaner]) {\\n                cleanerNeighborhoodAccess[_neighborhood][cleaner] = true;\\n                cleaners[cleaner].assignedNeighborhoods.push(_neighborhood);\\n                neighborhoodCleaners[_neighborhood].push(cleaner); // FIXED: Add to neighborhood cleaners array\\n                neighborhoods[_neighborhood].totalCleaners++;\\n                \\n                emit CleanerAssignedToNeighborhood(cleaner, _neighborhood);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Batch remove multiple cleaners from a neighborhood\\n     * @param _cleaners Array of cleaner addresses\\n     * @param _neighborhood Name of the neighborhood\\n     */\\n    function batchRemoveCleanersFromNeighborhood(\\n        address[] memory _cleaners,\\n        string memory _neighborhood\\n    ) \\n        external \\n        onlyNeighborhoodAdmin(_neighborhood)\\n        whenNotPaused\\n    {\\n        require(_cleaners.length > 0, \\\"No cleaners provided\\\");\\n        \\n        for (uint256 i = 0; i < _cleaners.length; i++) {\\n            address cleaner = _cleaners[i];\\n            if (cleanerNeighborhoodAccess[_neighborhood][cleaner]) {\\n                cleanerNeighborhoodAccess[_neighborhood][cleaner] = false;\\n                \\n                // Remove from cleaner's assigned neighborhoods array\\n                string[] storage assigned = cleaners[cleaner].assignedNeighborhoods;\\n                for (uint256 j = 0; j < assigned.length; j++) {\\n                    if (keccak256(abi.encodePacked(assigned[j])) == keccak256(abi.encodePacked(_neighborhood))) {\\n                        assigned[j] = assigned[assigned.length - 1];\\n                        assigned.pop();\\n                        break;\\n                    }\\n                }\\n                \\n                // FIXED: Remove from neighborhood cleaners array\\n                address[] storage neighborhoodCleanersList = neighborhoodCleaners[_neighborhood];\\n                for (uint256 k = 0; k < neighborhoodCleanersList.length; k++) {\\n                    if (neighborhoodCleanersList[k] == cleaner) {\\n                        neighborhoodCleanersList[k] = neighborhoodCleanersList[neighborhoodCleanersList.length - 1];\\n                        neighborhoodCleanersList.pop();\\n                        break;\\n                    }\\n                }\\n                \\n                neighborhoods[_neighborhood].totalCleaners--;\\n                emit CleanerRemovedFromNeighborhood(cleaner, _neighborhood);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Get contract pause status\\n     * @return Boolean indicating if contract is paused\\n     */\\n    function isPaused() external view returns (bool) {\\n        return contractPaused;\\n    }\\n\\n    /**\\n     * Get total number of registered neighborhoods\\n     * @return Total number of neighborhoods\\n     */\\n    function getTotalNeighborhoods() external view returns (uint256) {\\n        return registeredNeighborhoods.length;\\n    }\\n\\n    /**\\n     * Function that allows the contract to receive ETH\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * FIXED: Validate that a neighborhood exists before operations\\n     * @param _neighborhood Name of the neighborhood to check\\n     * @return Boolean indicating if neighborhood exists and is active\\n     */\\n    function validateNeighborhoodExists(string memory _neighborhood) external view returns (bool) {\\n        return bytes(neighborhoods[_neighborhood].name).length > 0 && neighborhoods[_neighborhood].isActive;\\n    }\\n\\n    /**\\n     * FIXED: Check for duplicate cleaner assignment more efficiently\\n     * @param _cleaner Address of the cleaner\\n     * @param _neighborhood Name of the neighborhood\\n     * @return Boolean indicating if cleaner is already assigned\\n     */\\n    function isCleanerAlreadyAssigned(address _cleaner, string memory _neighborhood) external view returns (bool) {\\n        return cleanerNeighborhoodAccess[_neighborhood][_cleaner];\\n    }\\n\\n    /**\\n     * Get all collection events for a specific house (DEPRECATED - use paginated version)\\n     * @param _houseAddress Address of the house\\n     * @return Array of event IDs for the house\\n     * @dev This function may run out of gas with large datasets. Use getHouseCollectionEventsPaginated instead.\\n     */\\n    function getHouseCollectionEvents(address _houseAddress) external view returns (uint256[] memory) {\\n        require(houses[_houseAddress].isRegistered, \\\"House not registered\\\");\\n        \\n        uint256[] memory eventIds = new uint256[](totalCollectionEvents);\\n        uint256 count = 0;\\n        \\n        for (uint256 i = 0; i < totalCollectionEvents; i++) {\\n            if (collectionEvents[i].house == _houseAddress) {\\n                eventIds[count] = i;\\n                count++;\\n            }\\n        }\\n        \\n        // Create properly sized array\\n        uint256[] memory result = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            result[i] = eventIds[i];\\n        }\\n        \\n        return result;\\n    }\\n\\n    /**\\n     * Get all collection events for a specific cleaner (DEPRECATED - use paginated version)\\n     * @param _cleanerAddress Address of the cleaner\\n     * @return Array of event IDs for the cleaner\\n     * @dev This function may run out of gas with large datasets. Use getCleanerCollectionEventsPaginated instead.\\n     */\\n    function getCleanerCollectionEvents(address _cleanerAddress) external view returns (uint256[] memory) {\\n        require(cleaners[_cleanerAddress].isRegistered, \\\"Cleaner not registered\\\");\\n        \\n        uint256[] memory eventIds = new uint256[](totalCollectionEvents);\\n        uint256 count = 0;\\n        \\n        for (uint256 i = 0; i < totalCollectionEvents; i++) {\\n            if (collectionEvents[i].cleaner == _cleanerAddress) {\\n                eventIds[count] = i;\\n                count++;\\n            }\\n        }\\n        \\n        // Create properly sized array\\n        uint256[] memory result = new uint256[](count);\\n        for (uint256 i = 0; i < count; i++) {\\n            result[i] = eventIds[i];\\n        }\\n        \\n        return result;\\n    }\\n} \",\"keccak256\":\"0x98f6e9ac571d32d2e6d8710670588d94629cb62236f3061149c0f2ccdd6316ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526000808055600181905560028190556003556010805460ff191690553480156200002d57600080fd5b50604051620061bd380380620061bd833981016040819052620000509162000062565b6001600160a01b031660805262000094565b6000602082840312156200007557600080fd5b81516001600160a01b03811681146200008d57600080fd5b9392505050565b6080516160ab62000112600039600081816107b301528181610bcf01528181610d7101528181610e81015281816128b50152818161290a01528181612d6601528181613196015281816134850152818161352801528181613ab50152818161434b0152818161473801528181614a010152614c8a01526160ab6000f3fe6080604052600436106102a05760003560e01c806302faee03146102ac57806303d2e592146102ce5780630cf8e30f146102ee5780630d330bb31461031757806311ac4e621461035f578063162d8afb1461037f5780631ea28fb91461039557806323713bc4146103cd57806324e84b871461045c57806337e72c001461047c578063392cf2bd146104915780633991737a146104b157806339d95f9f146104de5780633f4130c3146104f357806358ca06241461053f5780635a17f3eb1461055f578063626a122e1461057f5780636754e0f1146105ba5780636de52069146105ed57806371f3eeb91461060d57806374de423a1461062f5780637688b1f41461065c57806378c71b72146106725780637abb3d1b1461069f5780637e69e912146106d1578063862b87af146107055780638a67456a1461073a5780638d7a950c146107545780638d8feb0a146107815780638da5cb5b146107a15780638ff0e3fb146107d557806392335abd146107f55780639a3e6c00146108255780639be22613146108455780639e34229614610890578063a193ee59146108b0578063a5a823c3146108d0578063a886b398146108f0578063ac1996ab14610906578063aeb0983e14610926578063afc22def14610946578063b0851bbc14610966578063b187bd2614610988578063b1a4b9a0146109a0578063b5aa410d146109c0578063c115b8e9146109ed578063c44d630714610a1b578063c6166e9914610a30578063c9e7946d14610a45578063d90f644814610a72578063e0e1c82e14610a92578063e272b89214610ace578063e596705414610aee578063ee310f0f14610b03578063ee407d5714610b23578063f29cda4c14610b43578063f4df7e7114610b63578063f62198d414610b83578063fcf1144814610ba357600080fd5b366102a757005b600080fd5b3480156102b857600080fd5b506102cc6102c7366004615079565b610bc3565b005b3480156102da57600080fd5b506102cc6102e93660046150dd565b610d66565b3480156102fa57600080fd5b5061030460015481565b6040519081526020015b60405180910390f35b34801561032357600080fd5b50610337610332366004615121565b6110e7565b604080519586526020860194909452928401919091526060830152608082015260a00161030e565b34801561036b57600080fd5b506102cc61037a36600461515d565b61132f565b34801561038b57600080fd5b5061030460005481565b3480156103a157600080fd5b506103b56103b03660046151ac565b611691565b6040516001600160a01b03909116815260200161030e565b3480156103d957600080fd5b506104286103e83660046151c5565b6005602081905260009182526040909120805460018201546002830154600484015493909401546001600160a01b03909216939092909160ff9091169085565b604080516001600160a01b03909616865260208601949094529284019190915215156060830152608082015260a00161030e565b34801561046857600080fd5b506103b56104773660046151e0565b6116bb565b34801561048857600080fd5b50600f54610304565b34801561049d57600080fd5b506103b56104ac3660046151e0565b611702565b3480156104bd57600080fd5b506104d16104cc3660046151c5565b61172d565b60405161030e91906152af565b3480156104ea57600080fd5b50600054610304565b3480156104ff57600080fd5b5061052f61050e3660046151c5565b6001600160a01b031660009081526005602052604090206004015460ff1690565b604051901515815260200161030e565b34801561054b57600080fd5b5061052f61055a366004615121565b611906565b34801561056b57600080fd5b506102cc61057a366004615335565b611972565b34801561058b57600080fd5b5061059f61059a3660046151c5565b611cda565b6040805193845260208401929092529082015260600161030e565b3480156105c657600080fd5b506105da6105d53660046151ac565b611dad565b60405161030e979695949392919061538c565b3480156105f957600080fd5b5061052f6106083660046153dc565b611e83565b34801561061957600080fd5b50610622611ec5565b60405161030e9190615429565b34801561063b57600080fd5b5061064f61064a3660046151ac565b611f27565b60405161030e9190615476565b34801561066857600080fd5b5061030460025481565b34801561067e57600080fd5b5061069261068d3660046151c5565b61207c565b60405161030e91906154e9565b3480156106ab57600080fd5b506106bf6106ba3660046151c5565b612216565b60405161030e969594939291906154fc565b3480156106dd57600080fd5b506106f16106ec3660046151ac565b6122e4565b60405161030e989796959493929190615544565b34801561071157600080fd5b50610725610720366004615121565b6124cd565b60405161030e999897969594939291906155bc565b34801561074657600080fd5b5060105461052f9060ff1681565b34801561076057600080fd5b5061077461076f366004615121565b612640565b60405161030e9190615626565b34801561078d57600080fd5b5061052f61079c3660046151c5565b612891565b3480156107ad57600080fd5b506103b57f000000000000000000000000000000000000000000000000000000000000000081565b3480156107e157600080fd5b506103b56107f03660046151ac565b6128ee565b34801561080157600080fd5b5061052f6108103660046151c5565b600b6020526000908152604090205460ff1681565b34801561083157600080fd5b506102cc6108403660046156ce565b6128fe565b34801561085157600080fd5b5061052f6108603660046150dd565b8151602081840181018051600c825292820194820194909420919093529091526000908152604090205460ff1681565b34801561089c57600080fd5b506102cc6108ab3660046153dc565b612d5a565b3480156108bc57600080fd5b506106226108cb366004615121565b613033565b3480156108dc57600080fd5b5061059f6108eb3660046151c5565b6130ad565b3480156108fc57600080fd5b5061030460035481565b34801561091257600080fd5b506102cc6109213660046156ce565b61318a565b34801561093257600080fd5b506102cc610941366004615792565b61347a565b34801561095257600080fd5b506102cc6109613660046153dc565b61351c565b34801561097257600080fd5b5061097b61395c565b60405161030e9190615811565b34801561099457600080fd5b5060105460ff1661052f565b3480156109ac57600080fd5b5061052f6109bb3660046153dc565b613a35565b3480156109cc57600080fd5b506109e06109db3660046151ac565b613af0565b60405161030e9190615824565b3480156109f957600080fd5b50610a0d610a08366004615837565b613b9c565b60405161030e92919061586a565b348015610a2757600080fd5b506102cc613da2565b348015610a3c57600080fd5b50610622613f96565b348015610a5157600080fd5b50610a65610a603660046151c5565b613ff6565b60405161030e919061588c565b348015610a7e57600080fd5b5061097b610a8d3660046151c5565b614215565b348015610a9e57600080fd5b5061052f610aad3660046151c5565b6001600160a01b031660009081526004602052604090206005015460ff1690565b348015610ada57600080fd5b506102cc610ae936600461590b565b614340565b348015610afa57600080fd5b50600154610304565b348015610b0f57600080fd5b50610622610b1e366004615121565b6143cf565b348015610b2f57600080fd5b50610692610b3e3660046151c5565b6143e1565b348015610b4f57600080fd5b50610a0d610b5e366004615837565b61456f565b348015610b6f57600080fd5b506102cc610b7e366004615926565b61472d565b348015610b8f57600080fd5b506102cc610b9e366004615792565b6149f6565b348015610baf57600080fd5b506102cc610bbe366004615999565b614a98565b81336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610c485750336001600160a01b0316600a82604051610c1091906159d9565b908152604051908190036020019020600201546001600160a01b0316148015610c485750336000908152600b602052604090205460ff165b610c6d5760405162461bcd60e51b8152600401610c64906159f5565b60405180910390fd5b60105460ff1615610c905760405162461bcd60e51b8152600401610c6490615a36565b6000600a84604051610ca291906159d9565b9081526040519081900360200190208054610cbc90615a62565b905011610cdb5760405162461bcd60e51b8152600401610c6490615a9c565b81600a84604051610cec91906159d9565b9081526040519081900360200181206002018054921515600160a01b0260ff60a01b1990931692909217909155610d249084906159d9565b6040519081900381208315158252907f206b0ef45ee559966396a67ce838e4973922ecef89d3cb4a5e1208a30591e872906020015b60405180910390a2505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610dae5760405162461bcd60e51b8152600401610c6490615ad0565b60105460ff1615610dd15760405162461bcd60e51b8152600401610c6490615a36565b600a82604051610de191906159d9565b9081526040519081900360200190206002015460ff600160a01b90910416610e1b5760405162461bcd60e51b8152600401610c6490615a9c565b6001600160a01b038116610e415760405162461bcd60e51b8152600401610c6490615af7565b6000600a83604051610e5391906159d9565b908152604051908190036020019020600201546001600160a01b03908116915082168114801590610eb657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614155b1561104d576000805b600f54811015611024576000600f8281548110610ede57610ede615b26565b906000526020600020018054610ef390615a62565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1f90615a62565b8015610f6c5780601f10610f4157610100808354040283529160200191610f6c565b820191906000526020600020905b815481529060010190602001808311610f4f57829003601f168201915b5050505050905085604051602001610f8491906159d9565b6040516020818303038152906040528051906020012081604051602001610fab91906159d9565b60405160208183030381529060405280519060200120141580156110025750836001600160a01b0316600a82604051610fe491906159d9565b908152604051908190036020019020600201546001600160a01b0316145b15611011576001925050611024565b508061101c81615b52565b915050610ebf565b508061104b576001600160a01b0382166000908152600b60205260409020805460ff191690555b505b81600a8460405161105e91906159d9565b908152604080516020928190038301812060020180546001600160a01b0319166001600160a01b039586161790559285166000818152600b9093529120805460ff19166001179055906110b29085906159d9565b604051908190038120907f7d05a11f2bb7293af5865673c472e0c3cd8766de0b14611207abb8458c63ed5690600090a3505050565b600080600080600080600a8760405161110091906159d9565b908152604051908190036020019020805461111a90615a62565b9050116111395760405162461bcd60e51b8152600401610c6490615a9c565b6000600a8760405161114b91906159d9565b90815260200160405180910390206040518061012001604052908160008201805461117590615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546111a190615a62565b80156111ee5780601f106111c3576101008083540402835291602001916111ee565b820191906000526020600020905b8154815290600101906020018083116111d157829003601f168201915b5050505050815260200160018201805461120790615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461123390615a62565b80156112805780601f1061125557610100808354040283529160200191611280565b820191906000526020600020905b81548152906001019060200180831161126357829003601f168201915b505050918352505060028201546001600160a01b0381166020830152600160a01b900460ff16151560408201526003820154606082015260048201546080820152600582015460a080830191909152600683015460c08084019190915260079093015460e092830152830151918301519083015161010084015192995090975095509350905083156113255783611318846064615b6b565b6113229190615b82565b91505b5091939590929450565b3360009081526004602052604090206005015460ff166113615760405162461bcd60e51b8152600401610c6490615ba4565b60105460ff16156113845760405162461bcd60e51b8152600401610c6490615a36565b60025483106113a55760405162461bcd60e51b8152600401610c6490615bd2565b816113c25760405162461bcd60e51b8152600401610c6490615bfc565b60008151116113e35760405162461bcd60e51b8152600401610c6490615c30565b600083815260066020526040902060018101546001600160a01b031633146114595760405162461bcd60e51b8152602060048201526024808201527f4e6f7420617574686f72697a656420746f20636f6e6669726d207468697320656044820152631d995b9d60e21b6064820152608401610c64565b600581015460ff16156114a85760405162461bcd60e51b8152602060048201526017602482015276115d995b9d08185b1c9958591e4818dbdb999a5c9b5959604a1b6044820152606401610c64565b60058101805460ff1916600190811790915533600081815260046020818152604083209182018054958601815583528220909301869055908152600290910180546114f290615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461151e90615a62565b801561156b5780601f106115405761010080835404028352916020019161156b565b820191906000526020600020905b81548152906001019060200180831161154e57829003601f168201915b50505050509050600a8160405161158291906159d9565b90815260405190819003602001902060070180549060006115a283615b52565b9091555050815460408051808201909152601a815279436f6e6669726d656420436f6c6c656374696f6e20426f6e757360301b60208201526115f0916001600160a01b031690600a90614e6f565b61162933600f6040518060400160405280601581526020017421b7b63632b1ba34b7b7102b30b634b230ba34b7b760591b815250614e6f565b81546001600160a01b031660009081526005602081905260408220600201805491929091611658908490615c63565b9091555050604051339086907f52db567cccdb9bec024e70ad7970b0800b7a0b38d81cbc3d2ab5132f85dfc46190600090a35050505050565b600e81815481106116a157600080fd5b6000918252602090912001546001600160a01b0316905081565b815160208184018101805160098252928201918501919091209190528054829081106116e657600080fd5b6000918252602090912001546001600160a01b03169150829050565b815160208184018101805160088252928201918501919091209190528054829081106116e657600080fd5b61177b6040518060e0016040528060006001600160a01b031681526020016000815260200160608152602001600060ff16815260200160608152602001600015158152602001600081525090565b6001600160a01b03821660009081526004602052604090206005015460ff166117b65760405162461bcd60e51b8152600401610c6490615ba4565b6001600160a01b03808316600090815260046020908152604091829020825160e08101845281549094168452600181015491840191909152600281018054919284019161180290615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461182e90615a62565b801561187b5780601f106118505761010080835404028352916020019161187b565b820191906000526020600020905b81548152906001019060200180831161185e57829003601f168201915b5050509183525050600382015460ff1660208083019190915260048301805460408051828502810185018252828152940193928301828280156118dd57602002820191906000526020600020905b8154815260200190600101908083116118c9575b5050509183525050600582015460ff161515602082015260069091015460409091015292915050565b600080600a8360405161191991906159d9565b908152604051908190036020019020805461193390615a62565b905011801561196c5750600a8260405161194d91906159d9565b9081526040519081900360200190206002015460ff600160a01b909104165b92915050565b8160008151116119c35760405162461bcd60e51b815260206004820152601c60248201527b4e65696768626f72686f6f642063616e6e6f7420626520656d70747960201b6044820152606401610c64565b600a816040516119d391906159d9565b9081526040519081900360200190206002015460ff600160a01b90910416611a4e5760405162461bcd60e51b815260206004820152602860248201527f4e65696768626f72686f6f64206e6f7420616374697665206f7220646f65736e60448201526709dd08195e1a5cdd60c21b6064820152608401610c64565b8160008160ff16118015611a66575060148160ff1611155b611ab05760405162461bcd60e51b815260206004820152601b60248201527a496e76616c6964206e756d626572206f66207265736964656e747360281b6044820152606401610c64565b60105460ff1615611ad35760405162461bcd60e51b8152600401610c6490615a36565b3360009081526004602052604090206005015460ff1615611b315760405162461bcd60e51b8152602060048201526018602482015277121bdd5cd948185b1c9958591e481c9959da5cdd195c995960421b6044820152606401610c64565b33600081815260046020526040812080546001600160a01b0319169092178255600182015560028101611b648682615cda565b5060038101805460ff861660ff19918216179091556005820180549091166001908117909155426006830155600d805491820181556000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b03191633179055604051600890611bdf9087906159d9565b9081526040519081900360209081018220805460018101825560009182529190200180546001600160a01b03191633179055600a90611c1f9087906159d9565b9081526040519081900360200190206004018054906000611c3f83615b52565b9091555050600080549080611c5383615b52565b9190505550611c8e33600a604051806040016040528060128152602001712437bab9b2902932b3b4b9ba3930ba34b7b760711b815250614e6f565b336001600160a01b03167fd58b85d97fd9a25d767f432e493b06cb5dbeb58f40b042f24b2f6bc23b546cc9868642604051611ccb93929190615d93565b60405180910390a25050505050565b6001600160a01b0381166000908152600460205260408120600501548190819060ff16611d195760405162461bcd60e51b8152600401610c6490615ba4565b60005b600254811015611da5576000818152600660205260409020600101546001600160a01b03808716911603611d935783611d5481615b52565b60008381526006602052604090206005015490955060ff16159050611d855782611d7d81615b52565b935050611d93565b81611d8f81615b52565b9250505b80611d9d81615b52565b915050611d1c565b509193909250565b600660205260009081526040902080546001820154600283015460038401546004850180546001600160a01b0395861696949095169492939192611df090615a62565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1c90615a62565b8015611e695780601f10611e3e57610100808354040283529160200191611e69565b820191906000526020600020905b815481529060010190602001808311611e4c57829003601f168201915b505050506005830154600690930154919260ff1691905087565b6000600c82604051611e9591906159d9565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff16905092915050565b6060600d805480602002602001604051908101604052809291908181526020018280548015611f1d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611eff575b5050505050905090565b6040805160e0810182526000808252602082018190529181018290526060808201839052608082015260a0810182905260c08101919091526002548210611f805760405162461bcd60e51b8152600401610c6490615bd2565b600082815260066020908152604091829020825160e08101845281546001600160a01b0390811682526001830154169281019290925260028101549282019290925260038201546060820152600482018054919291608084019190611fe490615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461201090615a62565b80156118dd5780601f10612032576101008083540402835291602001916118dd565b820191906000526020600020905b815481529060010190602001808311612040575050509183525050600582015460ff161515602082015260069091015460409091015292915050565b6001600160a01b03811660009081526004602052604090206005015460609060ff166120ba5760405162461bcd60e51b8152600401610c6490615ba4565b60006002546001600160401b038111156120d6576120d6614faf565b6040519080825280602002602001820160405280156120ff578160200160208202803683370190505b5090506000805b600254811015612172576000818152600660205260409020600101546001600160a01b03808716911603612160578083838151811061214757612147615b26565b60209081029190910101528161215c81615b52565b9250505b8061216a81615b52565b915050612106565b506000816001600160401b0381111561218d5761218d614faf565b6040519080825280602002602001820160405280156121b6578160200160208202803683370190505b50905060005b8281101561220d578381815181106121d6576121d6615b26565b60200260200101518282815181106121f0576121f0615b26565b60209081029190910101528061220581615b52565b9150506121bc565b50949350505050565b6004602052600090815260409020805460018201546002830180546001600160a01b0390931693919261224890615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461227490615a62565b80156122c15780601f10612296576101008083540402835291602001916122c1565b820191906000526020600020905b8154815290600101906020018083116122a457829003601f168201915b5050505060038301546005840154600690940154929360ff918216939116915086565b6007602052600090815260409020805460018201546002830180546001600160a01b0390931693919261231690615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461234290615a62565b801561238f5780601f106123645761010080835404028352916020019161238f565b820191906000526020600020905b81548152906001019060200180831161237257829003601f168201915b5050505050908060030180546123a490615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546123d090615a62565b801561241d5780601f106123f25761010080835404028352916020019161241d565b820191906000526020600020905b81548152906001019060200180831161240057829003601f168201915b50505050509080600401805461243290615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461245e90615a62565b80156124ab5780601f10612480576101008083540402835291602001916124ab565b820191906000526020600020905b81548152906001019060200180831161248e57829003601f168201915b5050505060068301546007840154600890940154929360ff9091169290915088565b8051602081830181018051600a825292820191909301209152805481906124f390615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461251f90615a62565b801561256c5780601f106125415761010080835404028352916020019161256c565b820191906000526020600020905b81548152906001019060200180831161254f57829003601f168201915b50505050509080600101805461258190615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546125ad90615a62565b80156125fa5780601f106125cf576101008083540402835291602001916125fa565b820191906000526020600020905b8154815290600101906020018083116125dd57829003601f168201915b505050506002830154600384015460048501546005860154600687015460079097015495966001600160a01b03851696600160a01b90950460ff16955092939192909189565b61269a604051806101200160405280606081526020016060815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000600a836040516126ac91906159d9565b90815260405190819003602001902080546126c690615a62565b9050116126e55760405162461bcd60e51b8152600401610c6490615a9c565b600a826040516126f591906159d9565b90815260200160405180910390206040518061012001604052908160008201805461271f90615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461274b90615a62565b80156127985780601f1061276d57610100808354040283529160200191612798565b820191906000526020600020905b81548152906001019060200180831161277b57829003601f168201915b505050505081526020016001820180546127b190615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546127dd90615a62565b801561282a5780601f106127ff5761010080835404028352916020019161282a565b820191906000526020600020905b81548152906001019060200180831161280d57829003601f168201915b505050918352505060028201546001600160a01b0381166020830152600160a01b900460ff16151560408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e09091015292915050565b6001600160a01b0381166000908152600b602052604081205460ff168061196c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161492915050565b600d81815481106116a157600080fd5b80336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806129835750336001600160a01b0316600a8260405161294b91906159d9565b908152604051908190036020019020600201546001600160a01b03161480156129835750336000908152600b602052604090205460ff165b61299f5760405162461bcd60e51b8152600401610c64906159f5565b60105460ff16156129c25760405162461bcd60e51b8152600401610c6490615a36565b60008351116129e35760405162461bcd60e51b8152600401610c6490615dbb565b60005b8351811015612d54576000848281518110612a0357612a03615b26565b60200260200101519050600c84604051612a1d91906159d9565b90815260408051602092819003830190206001600160a01b0384166000908152925290205460ff1615612d41576000600c85604051612a5c91906159d9565b90815260408051602092819003830190206001600160a01b0385166000908152908352818120805460ff19169415159490941790935560059091528120600601905b8154811015612bad5785604051602001612ab891906159d9565b60405160208183030381529060405280519060200120828281548110612ae057612ae0615b26565b90600052602060002001604051602001612afa9190615de9565b6040516020818303038152906040528051906020012003612b9b5781548290612b2590600190615e5f565b81548110612b3557612b35615b26565b90600052602060002001828281548110612b5157612b51615b26565b906000526020600020019081612b679190615e72565b5081805480612b7857612b78615f46565b600190038181906000526020600020016000612b949190614f59565b9055612bad565b80612ba581615b52565b915050612a9e565b506000600986604051612bc091906159d9565b9081526020016040518091039020905060005b8154811015612cd957836001600160a01b0316828281548110612bf857612bf8615b26565b6000918252602090912001546001600160a01b031603612cc75781548290612c2290600190615e5f565b81548110612c3257612c32615b26565b9060005260206000200160009054906101000a90046001600160a01b0316828281548110612c6257612c62615b26565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081805480612ca057612ca0615f46565b600082815260209020810160001990810180546001600160a01b0319169055019055612cd9565b80612cd181615b52565b915050612bd3565b50600a86604051612cea91906159d9565b9081526040519081900360200190206005018054906000612d0a83615f5c565b9190505550826001600160a01b031660008051602061605683398151915287604051612d369190615824565b60405180910390a250505b5080612d4c81615b52565b9150506129e6565b50505050565b80336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612ddf5750336001600160a01b0316600a82604051612da791906159d9565b908152604051908190036020019020600201546001600160a01b0316148015612ddf5750336000908152600b602052604090205460ff165b612dfb5760405162461bcd60e51b8152600401610c64906159f5565b60105460ff1615612e1e5760405162461bcd60e51b8152600401610c6490615a36565b6001600160a01b03831660009081526005602052604090206004015460ff16612e595760405162461bcd60e51b8152600401610c6490615f73565b600a82604051612e6991906159d9565b9081526040519081900360200190206002015460ff600160a01b90910416612ea35760405162461bcd60e51b8152600401610c6490615fa3565b600c82604051612eb391906159d9565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff1615612f235760405162461bcd60e51b815260206004820152601860248201527710db19585b995c88185b1c9958591e48185cdcda59db995960421b6044820152606401610c64565b6001600c83604051612f3591906159d9565b90815260408051602092819003830190206001600160a01b0387166000908152908352818120805460ff1916941515949094179093556005825282206006018054600181018255908352912001612f8c8382615cda565b50600982604051612f9d91906159d9565b908152604051602091819003820181208054600181018255600091825292902090910180546001600160a01b0319166001600160a01b038616179055600a90612fe79084906159d9565b908152604051908190036020019020600501805490600061300783615b52565b9190505550826001600160a01b031660008051602061603683398151915283604051610d599190615824565b606060088260405161304591906159d9565b90815260408051918290036020908101832080548083028501830190935282845291908301828280156130a157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613083575b50505050509050919050565b6001600160a01b0381166000908152600560205260408120600401548190819060ff166130ec5760405162461bcd60e51b8152600401610c6490615f73565b60005b600254811015613163576000818152600660205260409020546001600160a01b03808716911603613151578361312481615b52565b60008381526006602052604090206005015490955060ff16159050613151578261314d81615b52565b9350505b8061315b81615b52565b9150506130ef565b5082156131835782613176836064615b6b565b6131809190615b82565b90505b9193909250565b80336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061320f5750336001600160a01b0316600a826040516131d791906159d9565b908152604051908190036020019020600201546001600160a01b031614801561320f5750336000908152600b602052604090205460ff165b61322b5760405162461bcd60e51b8152600401610c64906159f5565b60105460ff161561324e5760405162461bcd60e51b8152600401610c6490615a36565b600083511161326f5760405162461bcd60e51b8152600401610c6490615dbb565b600a8260405161327f91906159d9565b9081526040519081900360200190206002015460ff600160a01b909104166132b95760405162461bcd60e51b8152600401610c6490615fa3565b60005b8351811015612d545760008482815181106132d9576132d9615b26565b6020908102919091018101516001600160a01b0381166000908152600590925260409091206004015490915060ff1680156133495750600c8460405161331f91906159d9565b90815260408051602092819003830190206001600160a01b0384166000908152925290205460ff16155b15613467576001600c8560405161336091906159d9565b90815260408051602092819003830190206001600160a01b0385166000908152908352818120805460ff19169415159490941790935560058252822060060180546001810182559083529120016133b78582615cda565b506009846040516133c891906159d9565b908152604051602091819003820181208054600181018255600091825292902090910180546001600160a01b0319166001600160a01b038416179055600a906134129086906159d9565b908152604051908190036020019020600501805490600061343283615b52565b9190505550806001600160a01b03166000805160206160368339815191528560405161345e9190615824565b60405180910390a25b508061347281615b52565b9150506132bc565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146134c25760405162461bcd60e51b8152600401610c6490615ad0565b6001600160a01b03821660009081526004602052604090206005015460ff166134fd5760405162461bcd60e51b8152600401610c6490615ba4565b6001600160a01b03909116600090815260046020526040902060010155565b80336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806135a15750336001600160a01b0316600a8260405161356991906159d9565b908152604051908190036020019020600201546001600160a01b03161480156135a15750336000908152600b602052604090205460ff165b6135bd5760405162461bcd60e51b8152600401610c64906159f5565b60105460ff16156135e05760405162461bcd60e51b8152600401610c6490615a36565b600c826040516135f091906159d9565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff166136705760405162461bcd60e51b8152602060048201526024808201527f436c65616e6572206e6f742061737369676e656420746f206e65696768626f726044820152631a1bdbd960e21b6064820152608401610c64565b6000600c8360405161368291906159d9565b90815260408051602092819003830190206001600160a01b0387166000908152908352818120805460ff19169415159490941790935560059091528120600601905b81548110156137d357836040516020016136de91906159d9565b6040516020818303038152906040528051906020012082828154811061370657613706615b26565b906000526020600020016040516020016137209190615de9565b60405160208183030381529060405280519060200120036137c1578154829061374b90600190615e5f565b8154811061375b5761375b615b26565b9060005260206000200182828154811061377757613777615b26565b90600052602060002001908161378d9190615e72565b508180548061379e5761379e615f46565b6001900381819060005260206000200160006137ba9190614f59565b90556137d3565b806137cb81615b52565b9150506136c4565b5060006009846040516137e691906159d9565b9081526020016040518091039020905060005b81548110156138ff57856001600160a01b031682828154811061381e5761381e615b26565b6000918252602090912001546001600160a01b0316036138ed578154829061384890600190615e5f565b8154811061385857613858615b26565b9060005260206000200160009054906101000a90046001600160a01b031682828154811061388857613888615b26565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550818054806138c6576138c6615f46565b600082815260209020810160001990810180546001600160a01b03191690550190556138ff565b806138f781615b52565b9150506137f9565b50600a8460405161391091906159d9565b908152604051908190036020019020600501805490600061393083615f5c565b9190505550846001600160a01b031660008051602061605683398151915285604051611ccb9190615824565b6060600f805480602002602001604051908101604052809291908181526020016000905b82821015613a2c57838290600052602060002001805461399f90615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546139cb90615a62565b8015613a185780601f106139ed57610100808354040283529160200191613a18565b820191906000526020600020905b8154815290600101906020018083116139fb57829003601f168201915b505050505081526020019060010190613980565b50505050905090565b6000600c82604051613a4791906159d9565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff1680613aad5750826001600160a01b0316600a83604051613a8f91906159d9565b908152604051908190036020019020600201546001600160a01b0316145b80613ae957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b9392505050565b600f8181548110613b0057600080fd5b906000526020600020016000915090508054613b1b90615a62565b80601f0160208091040260200160405190810160405280929190818152602001828054613b4790615a62565b8015613b945780601f10613b6957610100808354040283529160200191613b94565b820191906000526020600020905b815481529060010190602001808311613b7757829003601f168201915b505050505081565b6001600160a01b0383166000908152600460205260408120600501546060919060ff16613bdb5760405162461bcd60e51b8152600401610c6490615ba4565b600083118015613bec575060648311155b613c085760405162461bcd60e51b8152600401610c6490615fd4565b6000805b600254811015613c5a576000818152600660205260409020600101546001600160a01b03808916911603613c485781613c4481615b52565b9250505b80613c5281615b52565b915050613c0c565b50808510613c985760005b604051908082528060200260200182016040528015613c8e578160200160208202803683370190505b5092509050613d9a565b8381613ca48288615c63565b1115613cb757613cb48683615e5f565b90505b6000816001600160401b03811115613cd157613cd1614faf565b604051908082528060200260200182016040528015613cfa578160200160208202803683370190505b50905060008060005b60025481108015613d1357508483105b15613d8f576000818152600660205260409020600101546001600160a01b03808d16911603613d7d57898210613d6f5780848481518110613d5657613d56615b26565b602090810291909101015282613d6b81615b52565b9350505b81613d7981615b52565b9250505b80613d8781615b52565b915050613d03565b509195509293505050505b935093915050565b60105460ff1615613dc55760405162461bcd60e51b8152600401610c6490615a36565b3360009081526005602052604090206004015460ff1615613e255760405162461bcd60e51b815260206004820152601a60248201527910db19585b995c88185b1c9958591e481c9959da5cdd195c995960321b6044820152606401610c64565b3360009081526004602052604090206005015460ff1615613e945760405162461bcd60e51b815260206004820152602360248201527f4164647265737320616c7265616479207265676973746572656420617320686f60448201526275736560e81b6064820152608401610c64565b336000818152600560208190526040822080546001600160a01b03199081168517825560018083018590556064600284015560048301805460ff1916821790554293830193909355600e805480850182559085527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018054909116909417909355805491613f2183615b52565b9190505550613f5e33600a6040518060400160405280601481526020017321b632b0b732b9102932b3b4b9ba3930ba34b7b760611b815250614e6f565b60405142815233907fdd834bc0e344533b42bfa014b5f8f8ae9d396bc5debb886b6bc56ee24c2ddf9e9060200160405180910390a250565b6060600e805480602002602001604051908101604052809291908181526020018280548015611f1d576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611eff575050505050905090565b6140416040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016060815260200160001515815260200160008152602001606081525090565b6001600160a01b03821660009081526005602052604090206004015460ff1661407c5760405162461bcd60e51b8152600401610c6490615f73565b6001600160a01b03808316600090815260056020908152604091829020825160e081018452815490941684526001810154848301526002810154848401526003810180548451818502810185019095528085529193606086019390929083018282801561410857602002820191906000526020600020905b8154815260200190600101908083116140f4575b505050505081526020016004820160009054906101000a900460ff161515151581526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020016000905b8282101561420757838290600052602060002001805461417a90615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546141a690615a62565b80156141f35780601f106141c8576101008083540402835291602001916141f3565b820191906000526020600020905b8154815290600101906020018083116141d657829003601f168201915b50505050508152602001906001019061415b565b505050915250909392505050565b6001600160a01b03811660009081526005602052604090206004015460609060ff166142535760405162461bcd60e51b8152600401610c6490615f73565b6001600160a01b038216600090815260056020908152604080832060060180548251818502810185019093528083529193909284015b828210156143355783829060005260206000200180546142a890615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546142d490615a62565b80156143215780601f106142f657610100808354040283529160200191614321565b820191906000526020600020905b81548152906001019060200180831161430457829003601f168201915b505050505081526020019060010190614289565b505050509050919050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146143885760405162461bcd60e51b8152600401610c6490615ad0565b6010805460ff19168215159081179091556040519081527f752d7e161ff5146f80e3820893176eb40532811e5e20400dfdde57455213706a9060200160405180910390a150565b606060098260405161304591906159d9565b6001600160a01b03811660009081526005602052604090206004015460609060ff1661441f5760405162461bcd60e51b8152600401610c6490615f73565b60006002546001600160401b0381111561443b5761443b614faf565b604051908082528060200260200182016040528015614464578160200160208202803683370190505b5090506000805b6002548110156144d4576000818152600660205260409020546001600160a01b038087169116036144c257808383815181106144a9576144a9615b26565b6020908102919091010152816144be81615b52565b9250505b806144cc81615b52565b91505061446b565b506000816001600160401b038111156144ef576144ef614faf565b604051908082528060200260200182016040528015614518578160200160208202803683370190505b50905060005b8281101561220d5783818151811061453857614538615b26565b602002602001015182828151811061455257614552615b26565b60209081029190910101528061456781615b52565b91505061451e565b6001600160a01b0383166000908152600560205260408120600401546060919060ff166145ae5760405162461bcd60e51b8152600401610c6490615f73565b6000831180156145bf575060648311155b6145db5760405162461bcd60e51b8152600401610c6490615fd4565b6000805b60025481101561462a576000818152600660205260409020546001600160a01b03808916911603614618578161461481615b52565b9250505b8061462281615b52565b9150506145df565b50808510614639576000613c65565b83816146458288615c63565b1115614658576146558683615e5f565b90505b6000816001600160401b0381111561467257614672614faf565b60405190808252806020026020018201604052801561469b578160200160208202803683370190505b50905060008060005b600254811080156146b457508483105b15613d8f576000818152600660205260409020546001600160a01b03808d1691160361471b5789821061470d57808484815181106146f4576146f4615b26565b60209081029190910101528261470981615b52565b9350505b8161471781615b52565b9250505b8061472581615b52565b9150506146a4565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146147755760405162461bcd60e51b8152600401610c6490615ad0565b60105460ff16156147985760405162461bcd60e51b8152600401610c6490615a36565b60008351116147f35760405162461bcd60e51b815260206004820152602160248201527f4e65696768626f72686f6f64206e616d652063616e6e6f7420626520656d70746044820152607960f81b6064820152608401610c64565b60008251116148425760405162461bcd60e51b815260206004820152601b60248201527a4465736372697074696f6e2063616e6e6f7420626520656d70747960281b6044820152606401610c64565b6001600160a01b0381166148685760405162461bcd60e51b8152600401610c6490615af7565b600a8360405161487891906159d9565b908152604051908190036020019020805461489290615a62565b1590506148df5760405162461bcd60e51b815260206004820152601b60248201527a4e65696768626f72686f6f6420616c72656164792065786973747360281b6044820152606401610c64565b6000600a846040516148f191906159d9565b90815260405190819003602001902090508061490d8582615cda565b506001810161491c8482615cda565b506002810180546001600160a81b0319166001600160a01b038416908117600160a01b179091554260038301556000908152600b60205260408120805460ff19166001908117909155600f805491820181559091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020161499d8582615cda565b50816001600160a01b0316846040516149b691906159d9565b604051908190038120428252907ff36227d4e0a75a4b5b4ba2bbf468614d1007c3770a1d73ac7da8145fee8bc6109060200160405180910390a350505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614614a3e5760405162461bcd60e51b8152600401610c6490615ad0565b6001600160a01b03821660009081526005602052604090206004015460ff16614a795760405162461bcd60e51b8152600401610c6490615f73565b6001600160a01b03909116600090815260056020526040902060020155565b3360009081526005602052604090206004015460ff16614aca5760405162461bcd60e51b8152600401610c6490615f73565b60105460ff1615614aed5760405162461bcd60e51b8152600401610c6490615a36565b6001600160a01b03831660009081526004602052604090206005015460ff16614b285760405162461bcd60e51b8152600401610c6490615ba4565b81614b455760405162461bcd60e51b8152600401610c6490615bfc565b6000815111614b665760405162461bcd60e51b8152600401610c6490615c30565b6001600160a01b03831660009081526004602052604081206002018054614b8c90615a62565b80601f0160208091040260200160405190810160405280929190818152602001828054614bb890615a62565b8015614c055780601f10614bda57610100808354040283529160200191614c05565b820191906000526020600020905b815481529060010190602001808311614be857829003601f168201915b50505050509050600c81604051614c1c91906159d9565b9081526040805160209281900383019020336000908152925290205460ff1680614c795750336001600160a01b0316600a82604051614c5b91906159d9565b908152604051908190036020019020600201546001600160a01b0316145b80614cac5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b614d0c5760405162461bcd60e51b815260206004820152602b60248201527f436c65616e6572206e6f7420617574686f72697a656420696e2074686973206e60448201526a195a59da189bdc9a1bdbd960aa1b6064820152608401610c64565b6002805460008181526006602052604090208054336001600160a01b03199182161782556001820180549091166001600160a01b0389161790554292810192909255600382018590559060048101614d648582615cda565b506005808201805460ff19169055600682018390553360009081526020918252604080822060030180546001810182559083529290912090910186905551600a90614db09085906159d9565b9081526040519081900360200190206006018054906000614dd083615b52565b909155505060028054906000614de583615b52565b9190505550614e203360146040518060400160405280601281526020017123b0b93130b3b29021b7b63632b1ba34b7b760711b815250614e6f565b604080518681524260208201526001600160a01b03881691339185917f6abb0de111797db4aa016f586b051a7b88947ba2c320bea32058f7db7508d713910160405180910390a4505050505050565b6001600160a01b03831660009081526004602052604090206005015460ff1615614ec9576001600160a01b03831660009081526004602052604081206001018054849290614ebe908490615c63565b90915550614f1e9050565b6001600160a01b03831660009081526005602052604090206004015460ff1615614f1e576001600160a01b03831660009081526005602052604081206001018054849290614f18908490615c63565b90915550505b826001600160a01b03167f4c3089477cda1ac100291a040b3ac97ff5f55b6d8b2acfb56a59b9419d95ce048383604051610d5992919061601c565b508054614f6590615a62565b6000825580601f10614f75575050565b601f016020900490600052602060002090810190614f939190614f96565b50565b5b80821115614fab5760008155600101614f97565b5090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614fed57614fed614faf565b604052919050565b600082601f83011261500657600080fd5b81356001600160401b0381111561501f5761501f614faf565b615032601f8201601f1916602001614fc5565b81815284602083860101111561504757600080fd5b816020850160208301376000918101602001919091529392505050565b8035801515811461507457600080fd5b919050565b6000806040838503121561508c57600080fd5b82356001600160401b038111156150a257600080fd5b6150ae85828601614ff5565b9250506150bd60208401615064565b90509250929050565b80356001600160a01b038116811461507457600080fd5b600080604083850312156150f057600080fd5b82356001600160401b0381111561510657600080fd5b61511285828601614ff5565b9250506150bd602084016150c6565b60006020828403121561513357600080fd5b81356001600160401b0381111561514957600080fd5b61515584828501614ff5565b949350505050565b60008060006060848603121561517257600080fd5b833592506020840135915060408401356001600160401b0381111561519657600080fd5b6151a286828701614ff5565b9150509250925092565b6000602082840312156151be57600080fd5b5035919050565b6000602082840312156151d757600080fd5b613ae9826150c6565b600080604083850312156151f357600080fd5b82356001600160401b0381111561520957600080fd5b61521585828601614ff5565b95602094909401359450505050565b60005b8381101561523f578181015183820152602001615227565b50506000910152565b60008151808452615260816020860160208601615224565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b838110156152a457815187529582019590820190600101615288565b509495945050505050565b6020815260018060a01b038251166020820152602082015160408201526000604083015160e060608401526152e8610100840182615248565b905060ff60608501511660808401526080840151601f198483030160a08501526153128282615274565b91505060a0840151151560c084015260c084015160e08401528091505092915050565b6000806040838503121561534857600080fd5b82356001600160401b0381111561535e57600080fd5b61536a85828601614ff5565b925050602083013560ff8116811461538157600080fd5b809150509250929050565b6001600160a01b03888116825287166020820152604081018690526060810185905260e0608082018190526000906153c690830186615248565b93151560a08301525060c0015295945050505050565b600080604083850312156153ef57600080fd5b6153f8836150c6565b915060208301356001600160401b0381111561541357600080fd5b61541f85828601614ff5565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561546a5783516001600160a01b031683529284019291840191600101615445565b50909695505050505050565b60208152600060018060a01b03808451166020840152806020850151166040840152506040830151606083015260608301516080830152608083015160e060a08401526154c7610100840182615248565b905060a0840151151560c084015260c084015160e08401528091505092915050565b602081526000613ae96020830184615274565b60018060a01b038716815285602082015260c06040820152600061552360c0830187615248565b60ff95909516606083015250911515608083015260a0909101529392505050565b6001600160a01b038916815260208101889052610100604082018190526000906155708382018a615248565b905082810360608401526155848189615248565b905082810360808401526155988188615248565b60ff9690961660a0840152505060c081019290925260e09091015295945050505050565b60006101208083526155d08184018d615248565b905082810360208401526155e4818c615248565b6001600160a01b039a909a16604084015250509515156060870152608086019490945260a085019290925260c084015260e08301526101009091015292915050565b6020815260008251610120806020850152615645610140850183615248565b91506020850151601f198584030160408601526156628382615248565b925050604085015161567f60608601826001600160a01b03169052565b506060850151801515608086015250608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151838701525050508091505092915050565b600080604083850312156156e157600080fd5b82356001600160401b03808211156156f857600080fd5b818501915085601f83011261570c57600080fd5b813560208282111561572057615720614faf565b8160051b61572f828201614fc5565b928352848101820192828101908a85111561574957600080fd5b958301955b8487101561576e5761575f876150c6565b8252958301959083019061574e565b975050508601359250508082111561578557600080fd5b5061541f85828601614ff5565b600080604083850312156157a557600080fd5b6157ae836150c6565b946020939093013593505050565b600081518084526020808501808196508360051b8101915082860160005b858110156158045782840389526157f2848351615248565b988501989350908401906001016157da565b5091979650505050505050565b602081526000613ae960208301846157bc565b602081526000613ae96020830184615248565b60008060006060848603121561584c57600080fd5b615855846150c6565b95602085013595506040909401359392505050565b60408152600061587d6040830185615274565b90508260208301529392505050565b6020815260018060a01b03825116602082015260208201516040820152604082015160608201526000606083015160e060808401526158cf610100840182615274565b90506080840151151560a084015260a084015160c084015260c0840151601f198483030160e085015261590282826157bc565b95945050505050565b60006020828403121561591d57600080fd5b613ae982615064565b60008060006060848603121561593b57600080fd5b83356001600160401b038082111561595257600080fd5b61595e87838801614ff5565b9450602086013591508082111561597457600080fd5b5061598186828701614ff5565b925050615990604085016150c6565b90509250925092565b6000806000606084860312156159ae57600080fd5b6159b7846150c6565b92506020840135915060408401356001600160401b0381111561519657600080fd5b600082516159eb818460208701615224565b9190910192915050565b60208082526021908201527f4e6f7420617574686f72697a6564206e65696768626f72686f6f642061646d696040820152603760f91b606082015260800190565b60208082526012908201527110dbdb9d1c9858dd081a5cc81c185d5cd95960721b604082015260600190565b600181811c90821680615a7657607f821691505b602082108103615a9657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601a908201527913995a59da189bdc9a1bdbd908191bd95cdb89dd08195e1a5cdd60321b604082015260600190565b6020808252600d908201526c2737ba103a34329037bbb732b960991b604082015260600190565b602080825260159082015274496e76616c69642061646d696e206164647265737360581b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201615b6457615b64615b3c565b5060010190565b808202811582820484141761196c5761196c615b3c565b600082615b9f57634e487b7160e01b600052601260045260246000fd5b500490565b602080825260149082015273121bdd5cd9481b9bdd081c9959da5cdd195c995960621b604082015260600190565b60208082526010908201526f125b9d985b1a5908195d995b9d08125160821b604082015260600190565b6020808252601a9082015279496d61676520686173682063616e6e6f7420626520656d70747960301b604082015260600190565b602080825260199082015278496d616765205552492063616e6e6f7420626520656d70747960381b604082015260600190565b8082018082111561196c5761196c615b3c565b601f821115615cc057600081815260208120601f850160051c81016020861015615c9d5750805b601f850160051c820191505b81811015615cbc57828155600101615ca9565b5050505b505050565b600019600383901b1c191660019190911b1790565b81516001600160401b03811115615cf357615cf3614faf565b615d0781615d018454615a62565b84615c76565b602080601f831160018114615d365760008415615d245750858301515b615d2e8582615cc5565b865550615cbc565b600085815260208120601f198616915b82811015615d6557888601518255948401946001909101908401615d46565b5085821015615d835787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000615da66060830186615248565b60ff9490941660208301525060400152919050565b602080825260149082015273139bc818db19585b995c9cc81c1c9bdd9a59195960621b604082015260600190565b6000808354615df781615a62565b60018281168015615e0f5760018114615e2457615e53565b60ff1984168752821515830287019450615e53565b8760005260208060002060005b85811015615e4a5781548a820152908401908201615e31565b50505082870194505b50929695505050505050565b8181038181111561196c5761196c615b3c565b818103615e7d575050565b615e878254615a62565b6001600160401b03811115615e9e57615e9e614faf565b615eac81615d018454615a62565b6000601f821160018114615eda5760008315615ec85750848201545b615ed28482615cc5565b855550615f3f565b600085815260209020601f19841690600086815260209020845b83811015615f145782860154825560019586019590910190602001615ef4565b5085831015615f325781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fd5b600081615f6b57615f6b615b3c565b506000190190565b60208082526016908201527510db19585b995c881b9bdd081c9959da5cdd195c995960521b604082015260600190565b6020808252601790820152764e65696768626f72686f6f64206e6f742061637469766560481b604082015260600190565b60208082526028908201527f496e76616c6964206c696d69743a206d757374206265206265747765656e2031604082015267020616e64203130360c41b606082015260800190565b828152604060208201526000615155604083018461524856fe51d702b24d103745e0d20301c211e010c409a7c9e44ee6f4670d99cde9ea3eb5ee186675c6b8e9fd58ce1f6273a3a8f21e41653bcf8a4041f606edc00099c202a2646970667358221220faeb718ffd191d2b783216764c7de860bd2420ff71eb694c733c67e3f6cb5ef364736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102a05760003560e01c806302faee03146102ac57806303d2e592146102ce5780630cf8e30f146102ee5780630d330bb31461031757806311ac4e621461035f578063162d8afb1461037f5780631ea28fb91461039557806323713bc4146103cd57806324e84b871461045c57806337e72c001461047c578063392cf2bd146104915780633991737a146104b157806339d95f9f146104de5780633f4130c3146104f357806358ca06241461053f5780635a17f3eb1461055f578063626a122e1461057f5780636754e0f1146105ba5780636de52069146105ed57806371f3eeb91461060d57806374de423a1461062f5780637688b1f41461065c57806378c71b72146106725780637abb3d1b1461069f5780637e69e912146106d1578063862b87af146107055780638a67456a1461073a5780638d7a950c146107545780638d8feb0a146107815780638da5cb5b146107a15780638ff0e3fb146107d557806392335abd146107f55780639a3e6c00146108255780639be22613146108455780639e34229614610890578063a193ee59146108b0578063a5a823c3146108d0578063a886b398146108f0578063ac1996ab14610906578063aeb0983e14610926578063afc22def14610946578063b0851bbc14610966578063b187bd2614610988578063b1a4b9a0146109a0578063b5aa410d146109c0578063c115b8e9146109ed578063c44d630714610a1b578063c6166e9914610a30578063c9e7946d14610a45578063d90f644814610a72578063e0e1c82e14610a92578063e272b89214610ace578063e596705414610aee578063ee310f0f14610b03578063ee407d5714610b23578063f29cda4c14610b43578063f4df7e7114610b63578063f62198d414610b83578063fcf1144814610ba357600080fd5b366102a757005b600080fd5b3480156102b857600080fd5b506102cc6102c7366004615079565b610bc3565b005b3480156102da57600080fd5b506102cc6102e93660046150dd565b610d66565b3480156102fa57600080fd5b5061030460015481565b6040519081526020015b60405180910390f35b34801561032357600080fd5b50610337610332366004615121565b6110e7565b604080519586526020860194909452928401919091526060830152608082015260a00161030e565b34801561036b57600080fd5b506102cc61037a36600461515d565b61132f565b34801561038b57600080fd5b5061030460005481565b3480156103a157600080fd5b506103b56103b03660046151ac565b611691565b6040516001600160a01b03909116815260200161030e565b3480156103d957600080fd5b506104286103e83660046151c5565b6005602081905260009182526040909120805460018201546002830154600484015493909401546001600160a01b03909216939092909160ff9091169085565b604080516001600160a01b03909616865260208601949094529284019190915215156060830152608082015260a00161030e565b34801561046857600080fd5b506103b56104773660046151e0565b6116bb565b34801561048857600080fd5b50600f54610304565b34801561049d57600080fd5b506103b56104ac3660046151e0565b611702565b3480156104bd57600080fd5b506104d16104cc3660046151c5565b61172d565b60405161030e91906152af565b3480156104ea57600080fd5b50600054610304565b3480156104ff57600080fd5b5061052f61050e3660046151c5565b6001600160a01b031660009081526005602052604090206004015460ff1690565b604051901515815260200161030e565b34801561054b57600080fd5b5061052f61055a366004615121565b611906565b34801561056b57600080fd5b506102cc61057a366004615335565b611972565b34801561058b57600080fd5b5061059f61059a3660046151c5565b611cda565b6040805193845260208401929092529082015260600161030e565b3480156105c657600080fd5b506105da6105d53660046151ac565b611dad565b60405161030e979695949392919061538c565b3480156105f957600080fd5b5061052f6106083660046153dc565b611e83565b34801561061957600080fd5b50610622611ec5565b60405161030e9190615429565b34801561063b57600080fd5b5061064f61064a3660046151ac565b611f27565b60405161030e9190615476565b34801561066857600080fd5b5061030460025481565b34801561067e57600080fd5b5061069261068d3660046151c5565b61207c565b60405161030e91906154e9565b3480156106ab57600080fd5b506106bf6106ba3660046151c5565b612216565b60405161030e969594939291906154fc565b3480156106dd57600080fd5b506106f16106ec3660046151ac565b6122e4565b60405161030e989796959493929190615544565b34801561071157600080fd5b50610725610720366004615121565b6124cd565b60405161030e999897969594939291906155bc565b34801561074657600080fd5b5060105461052f9060ff1681565b34801561076057600080fd5b5061077461076f366004615121565b612640565b60405161030e9190615626565b34801561078d57600080fd5b5061052f61079c3660046151c5565b612891565b3480156107ad57600080fd5b506103b57f000000000000000000000000000000000000000000000000000000000000000081565b3480156107e157600080fd5b506103b56107f03660046151ac565b6128ee565b34801561080157600080fd5b5061052f6108103660046151c5565b600b6020526000908152604090205460ff1681565b34801561083157600080fd5b506102cc6108403660046156ce565b6128fe565b34801561085157600080fd5b5061052f6108603660046150dd565b8151602081840181018051600c825292820194820194909420919093529091526000908152604090205460ff1681565b34801561089c57600080fd5b506102cc6108ab3660046153dc565b612d5a565b3480156108bc57600080fd5b506106226108cb366004615121565b613033565b3480156108dc57600080fd5b5061059f6108eb3660046151c5565b6130ad565b3480156108fc57600080fd5b5061030460035481565b34801561091257600080fd5b506102cc6109213660046156ce565b61318a565b34801561093257600080fd5b506102cc610941366004615792565b61347a565b34801561095257600080fd5b506102cc6109613660046153dc565b61351c565b34801561097257600080fd5b5061097b61395c565b60405161030e9190615811565b34801561099457600080fd5b5060105460ff1661052f565b3480156109ac57600080fd5b5061052f6109bb3660046153dc565b613a35565b3480156109cc57600080fd5b506109e06109db3660046151ac565b613af0565b60405161030e9190615824565b3480156109f957600080fd5b50610a0d610a08366004615837565b613b9c565b60405161030e92919061586a565b348015610a2757600080fd5b506102cc613da2565b348015610a3c57600080fd5b50610622613f96565b348015610a5157600080fd5b50610a65610a603660046151c5565b613ff6565b60405161030e919061588c565b348015610a7e57600080fd5b5061097b610a8d3660046151c5565b614215565b348015610a9e57600080fd5b5061052f610aad3660046151c5565b6001600160a01b031660009081526004602052604090206005015460ff1690565b348015610ada57600080fd5b506102cc610ae936600461590b565b614340565b348015610afa57600080fd5b50600154610304565b348015610b0f57600080fd5b50610622610b1e366004615121565b6143cf565b348015610b2f57600080fd5b50610692610b3e3660046151c5565b6143e1565b348015610b4f57600080fd5b50610a0d610b5e366004615837565b61456f565b348015610b6f57600080fd5b506102cc610b7e366004615926565b61472d565b348015610b8f57600080fd5b506102cc610b9e366004615792565b6149f6565b348015610baf57600080fd5b506102cc610bbe366004615999565b614a98565b81336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480610c485750336001600160a01b0316600a82604051610c1091906159d9565b908152604051908190036020019020600201546001600160a01b0316148015610c485750336000908152600b602052604090205460ff165b610c6d5760405162461bcd60e51b8152600401610c64906159f5565b60405180910390fd5b60105460ff1615610c905760405162461bcd60e51b8152600401610c6490615a36565b6000600a84604051610ca291906159d9565b9081526040519081900360200190208054610cbc90615a62565b905011610cdb5760405162461bcd60e51b8152600401610c6490615a9c565b81600a84604051610cec91906159d9565b9081526040519081900360200181206002018054921515600160a01b0260ff60a01b1990931692909217909155610d249084906159d9565b6040519081900381208315158252907f206b0ef45ee559966396a67ce838e4973922ecef89d3cb4a5e1208a30591e872906020015b60405180910390a2505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610dae5760405162461bcd60e51b8152600401610c6490615ad0565b60105460ff1615610dd15760405162461bcd60e51b8152600401610c6490615a36565b600a82604051610de191906159d9565b9081526040519081900360200190206002015460ff600160a01b90910416610e1b5760405162461bcd60e51b8152600401610c6490615a9c565b6001600160a01b038116610e415760405162461bcd60e51b8152600401610c6490615af7565b6000600a83604051610e5391906159d9565b908152604051908190036020019020600201546001600160a01b03908116915082168114801590610eb657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614155b1561104d576000805b600f54811015611024576000600f8281548110610ede57610ede615b26565b906000526020600020018054610ef390615a62565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1f90615a62565b8015610f6c5780601f10610f4157610100808354040283529160200191610f6c565b820191906000526020600020905b815481529060010190602001808311610f4f57829003601f168201915b5050505050905085604051602001610f8491906159d9565b6040516020818303038152906040528051906020012081604051602001610fab91906159d9565b60405160208183030381529060405280519060200120141580156110025750836001600160a01b0316600a82604051610fe491906159d9565b908152604051908190036020019020600201546001600160a01b0316145b15611011576001925050611024565b508061101c81615b52565b915050610ebf565b508061104b576001600160a01b0382166000908152600b60205260409020805460ff191690555b505b81600a8460405161105e91906159d9565b908152604080516020928190038301812060020180546001600160a01b0319166001600160a01b039586161790559285166000818152600b9093529120805460ff19166001179055906110b29085906159d9565b604051908190038120907f7d05a11f2bb7293af5865673c472e0c3cd8766de0b14611207abb8458c63ed5690600090a3505050565b600080600080600080600a8760405161110091906159d9565b908152604051908190036020019020805461111a90615a62565b9050116111395760405162461bcd60e51b8152600401610c6490615a9c565b6000600a8760405161114b91906159d9565b90815260200160405180910390206040518061012001604052908160008201805461117590615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546111a190615a62565b80156111ee5780601f106111c3576101008083540402835291602001916111ee565b820191906000526020600020905b8154815290600101906020018083116111d157829003601f168201915b5050505050815260200160018201805461120790615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461123390615a62565b80156112805780601f1061125557610100808354040283529160200191611280565b820191906000526020600020905b81548152906001019060200180831161126357829003601f168201915b505050918352505060028201546001600160a01b0381166020830152600160a01b900460ff16151560408201526003820154606082015260048201546080820152600582015460a080830191909152600683015460c08084019190915260079093015460e092830152830151918301519083015161010084015192995090975095509350905083156113255783611318846064615b6b565b6113229190615b82565b91505b5091939590929450565b3360009081526004602052604090206005015460ff166113615760405162461bcd60e51b8152600401610c6490615ba4565b60105460ff16156113845760405162461bcd60e51b8152600401610c6490615a36565b60025483106113a55760405162461bcd60e51b8152600401610c6490615bd2565b816113c25760405162461bcd60e51b8152600401610c6490615bfc565b60008151116113e35760405162461bcd60e51b8152600401610c6490615c30565b600083815260066020526040902060018101546001600160a01b031633146114595760405162461bcd60e51b8152602060048201526024808201527f4e6f7420617574686f72697a656420746f20636f6e6669726d207468697320656044820152631d995b9d60e21b6064820152608401610c64565b600581015460ff16156114a85760405162461bcd60e51b8152602060048201526017602482015276115d995b9d08185b1c9958591e4818dbdb999a5c9b5959604a1b6044820152606401610c64565b60058101805460ff1916600190811790915533600081815260046020818152604083209182018054958601815583528220909301869055908152600290910180546114f290615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461151e90615a62565b801561156b5780601f106115405761010080835404028352916020019161156b565b820191906000526020600020905b81548152906001019060200180831161154e57829003601f168201915b50505050509050600a8160405161158291906159d9565b90815260405190819003602001902060070180549060006115a283615b52565b9091555050815460408051808201909152601a815279436f6e6669726d656420436f6c6c656374696f6e20426f6e757360301b60208201526115f0916001600160a01b031690600a90614e6f565b61162933600f6040518060400160405280601581526020017421b7b63632b1ba34b7b7102b30b634b230ba34b7b760591b815250614e6f565b81546001600160a01b031660009081526005602081905260408220600201805491929091611658908490615c63565b9091555050604051339086907f52db567cccdb9bec024e70ad7970b0800b7a0b38d81cbc3d2ab5132f85dfc46190600090a35050505050565b600e81815481106116a157600080fd5b6000918252602090912001546001600160a01b0316905081565b815160208184018101805160098252928201918501919091209190528054829081106116e657600080fd5b6000918252602090912001546001600160a01b03169150829050565b815160208184018101805160088252928201918501919091209190528054829081106116e657600080fd5b61177b6040518060e0016040528060006001600160a01b031681526020016000815260200160608152602001600060ff16815260200160608152602001600015158152602001600081525090565b6001600160a01b03821660009081526004602052604090206005015460ff166117b65760405162461bcd60e51b8152600401610c6490615ba4565b6001600160a01b03808316600090815260046020908152604091829020825160e08101845281549094168452600181015491840191909152600281018054919284019161180290615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461182e90615a62565b801561187b5780601f106118505761010080835404028352916020019161187b565b820191906000526020600020905b81548152906001019060200180831161185e57829003601f168201915b5050509183525050600382015460ff1660208083019190915260048301805460408051828502810185018252828152940193928301828280156118dd57602002820191906000526020600020905b8154815260200190600101908083116118c9575b5050509183525050600582015460ff161515602082015260069091015460409091015292915050565b600080600a8360405161191991906159d9565b908152604051908190036020019020805461193390615a62565b905011801561196c5750600a8260405161194d91906159d9565b9081526040519081900360200190206002015460ff600160a01b909104165b92915050565b8160008151116119c35760405162461bcd60e51b815260206004820152601c60248201527b4e65696768626f72686f6f642063616e6e6f7420626520656d70747960201b6044820152606401610c64565b600a816040516119d391906159d9565b9081526040519081900360200190206002015460ff600160a01b90910416611a4e5760405162461bcd60e51b815260206004820152602860248201527f4e65696768626f72686f6f64206e6f7420616374697665206f7220646f65736e60448201526709dd08195e1a5cdd60c21b6064820152608401610c64565b8160008160ff16118015611a66575060148160ff1611155b611ab05760405162461bcd60e51b815260206004820152601b60248201527a496e76616c6964206e756d626572206f66207265736964656e747360281b6044820152606401610c64565b60105460ff1615611ad35760405162461bcd60e51b8152600401610c6490615a36565b3360009081526004602052604090206005015460ff1615611b315760405162461bcd60e51b8152602060048201526018602482015277121bdd5cd948185b1c9958591e481c9959da5cdd195c995960421b6044820152606401610c64565b33600081815260046020526040812080546001600160a01b0319169092178255600182015560028101611b648682615cda565b5060038101805460ff861660ff19918216179091556005820180549091166001908117909155426006830155600d805491820181556000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb50180546001600160a01b03191633179055604051600890611bdf9087906159d9565b9081526040519081900360209081018220805460018101825560009182529190200180546001600160a01b03191633179055600a90611c1f9087906159d9565b9081526040519081900360200190206004018054906000611c3f83615b52565b9091555050600080549080611c5383615b52565b9190505550611c8e33600a604051806040016040528060128152602001712437bab9b2902932b3b4b9ba3930ba34b7b760711b815250614e6f565b336001600160a01b03167fd58b85d97fd9a25d767f432e493b06cb5dbeb58f40b042f24b2f6bc23b546cc9868642604051611ccb93929190615d93565b60405180910390a25050505050565b6001600160a01b0381166000908152600460205260408120600501548190819060ff16611d195760405162461bcd60e51b8152600401610c6490615ba4565b60005b600254811015611da5576000818152600660205260409020600101546001600160a01b03808716911603611d935783611d5481615b52565b60008381526006602052604090206005015490955060ff16159050611d855782611d7d81615b52565b935050611d93565b81611d8f81615b52565b9250505b80611d9d81615b52565b915050611d1c565b509193909250565b600660205260009081526040902080546001820154600283015460038401546004850180546001600160a01b0395861696949095169492939192611df090615a62565b80601f0160208091040260200160405190810160405280929190818152602001828054611e1c90615a62565b8015611e695780601f10611e3e57610100808354040283529160200191611e69565b820191906000526020600020905b815481529060010190602001808311611e4c57829003601f168201915b505050506005830154600690930154919260ff1691905087565b6000600c82604051611e9591906159d9565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff16905092915050565b6060600d805480602002602001604051908101604052809291908181526020018280548015611f1d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611eff575b5050505050905090565b6040805160e0810182526000808252602082018190529181018290526060808201839052608082015260a0810182905260c08101919091526002548210611f805760405162461bcd60e51b8152600401610c6490615bd2565b600082815260066020908152604091829020825160e08101845281546001600160a01b0390811682526001830154169281019290925260028101549282019290925260038201546060820152600482018054919291608084019190611fe490615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461201090615a62565b80156118dd5780601f10612032576101008083540402835291602001916118dd565b820191906000526020600020905b815481529060010190602001808311612040575050509183525050600582015460ff161515602082015260069091015460409091015292915050565b6001600160a01b03811660009081526004602052604090206005015460609060ff166120ba5760405162461bcd60e51b8152600401610c6490615ba4565b60006002546001600160401b038111156120d6576120d6614faf565b6040519080825280602002602001820160405280156120ff578160200160208202803683370190505b5090506000805b600254811015612172576000818152600660205260409020600101546001600160a01b03808716911603612160578083838151811061214757612147615b26565b60209081029190910101528161215c81615b52565b9250505b8061216a81615b52565b915050612106565b506000816001600160401b0381111561218d5761218d614faf565b6040519080825280602002602001820160405280156121b6578160200160208202803683370190505b50905060005b8281101561220d578381815181106121d6576121d6615b26565b60200260200101518282815181106121f0576121f0615b26565b60209081029190910101528061220581615b52565b9150506121bc565b50949350505050565b6004602052600090815260409020805460018201546002830180546001600160a01b0390931693919261224890615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461227490615a62565b80156122c15780601f10612296576101008083540402835291602001916122c1565b820191906000526020600020905b8154815290600101906020018083116122a457829003601f168201915b5050505060038301546005840154600690940154929360ff918216939116915086565b6007602052600090815260409020805460018201546002830180546001600160a01b0390931693919261231690615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461234290615a62565b801561238f5780601f106123645761010080835404028352916020019161238f565b820191906000526020600020905b81548152906001019060200180831161237257829003601f168201915b5050505050908060030180546123a490615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546123d090615a62565b801561241d5780601f106123f25761010080835404028352916020019161241d565b820191906000526020600020905b81548152906001019060200180831161240057829003601f168201915b50505050509080600401805461243290615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461245e90615a62565b80156124ab5780601f10612480576101008083540402835291602001916124ab565b820191906000526020600020905b81548152906001019060200180831161248e57829003601f168201915b5050505060068301546007840154600890940154929360ff9091169290915088565b8051602081830181018051600a825292820191909301209152805481906124f390615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461251f90615a62565b801561256c5780601f106125415761010080835404028352916020019161256c565b820191906000526020600020905b81548152906001019060200180831161254f57829003601f168201915b50505050509080600101805461258190615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546125ad90615a62565b80156125fa5780601f106125cf576101008083540402835291602001916125fa565b820191906000526020600020905b8154815290600101906020018083116125dd57829003601f168201915b505050506002830154600384015460048501546005860154600687015460079097015495966001600160a01b03851696600160a01b90950460ff16955092939192909189565b61269a604051806101200160405280606081526020016060815260200160006001600160a01b0316815260200160001515815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000600a836040516126ac91906159d9565b90815260405190819003602001902080546126c690615a62565b9050116126e55760405162461bcd60e51b8152600401610c6490615a9c565b600a826040516126f591906159d9565b90815260200160405180910390206040518061012001604052908160008201805461271f90615a62565b80601f016020809104026020016040519081016040528092919081815260200182805461274b90615a62565b80156127985780601f1061276d57610100808354040283529160200191612798565b820191906000526020600020905b81548152906001019060200180831161277b57829003601f168201915b505050505081526020016001820180546127b190615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546127dd90615a62565b801561282a5780601f106127ff5761010080835404028352916020019161282a565b820191906000526020600020905b81548152906001019060200180831161280d57829003601f168201915b505050918352505060028201546001600160a01b0381166020830152600160a01b900460ff16151560408201526003820154606082015260048201546080820152600582015460a0820152600682015460c082015260079091015460e09091015292915050565b6001600160a01b0381166000908152600b602052604081205460ff168061196c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161492915050565b600d81815481106116a157600080fd5b80336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806129835750336001600160a01b0316600a8260405161294b91906159d9565b908152604051908190036020019020600201546001600160a01b03161480156129835750336000908152600b602052604090205460ff165b61299f5760405162461bcd60e51b8152600401610c64906159f5565b60105460ff16156129c25760405162461bcd60e51b8152600401610c6490615a36565b60008351116129e35760405162461bcd60e51b8152600401610c6490615dbb565b60005b8351811015612d54576000848281518110612a0357612a03615b26565b60200260200101519050600c84604051612a1d91906159d9565b90815260408051602092819003830190206001600160a01b0384166000908152925290205460ff1615612d41576000600c85604051612a5c91906159d9565b90815260408051602092819003830190206001600160a01b0385166000908152908352818120805460ff19169415159490941790935560059091528120600601905b8154811015612bad5785604051602001612ab891906159d9565b60405160208183030381529060405280519060200120828281548110612ae057612ae0615b26565b90600052602060002001604051602001612afa9190615de9565b6040516020818303038152906040528051906020012003612b9b5781548290612b2590600190615e5f565b81548110612b3557612b35615b26565b90600052602060002001828281548110612b5157612b51615b26565b906000526020600020019081612b679190615e72565b5081805480612b7857612b78615f46565b600190038181906000526020600020016000612b949190614f59565b9055612bad565b80612ba581615b52565b915050612a9e565b506000600986604051612bc091906159d9565b9081526020016040518091039020905060005b8154811015612cd957836001600160a01b0316828281548110612bf857612bf8615b26565b6000918252602090912001546001600160a01b031603612cc75781548290612c2290600190615e5f565b81548110612c3257612c32615b26565b9060005260206000200160009054906101000a90046001600160a01b0316828281548110612c6257612c62615b26565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081805480612ca057612ca0615f46565b600082815260209020810160001990810180546001600160a01b0319169055019055612cd9565b80612cd181615b52565b915050612bd3565b50600a86604051612cea91906159d9565b9081526040519081900360200190206005018054906000612d0a83615f5c565b9190505550826001600160a01b031660008051602061605683398151915287604051612d369190615824565b60405180910390a250505b5080612d4c81615b52565b9150506129e6565b50505050565b80336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480612ddf5750336001600160a01b0316600a82604051612da791906159d9565b908152604051908190036020019020600201546001600160a01b0316148015612ddf5750336000908152600b602052604090205460ff165b612dfb5760405162461bcd60e51b8152600401610c64906159f5565b60105460ff1615612e1e5760405162461bcd60e51b8152600401610c6490615a36565b6001600160a01b03831660009081526005602052604090206004015460ff16612e595760405162461bcd60e51b8152600401610c6490615f73565b600a82604051612e6991906159d9565b9081526040519081900360200190206002015460ff600160a01b90910416612ea35760405162461bcd60e51b8152600401610c6490615fa3565b600c82604051612eb391906159d9565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff1615612f235760405162461bcd60e51b815260206004820152601860248201527710db19585b995c88185b1c9958591e48185cdcda59db995960421b6044820152606401610c64565b6001600c83604051612f3591906159d9565b90815260408051602092819003830190206001600160a01b0387166000908152908352818120805460ff1916941515949094179093556005825282206006018054600181018255908352912001612f8c8382615cda565b50600982604051612f9d91906159d9565b908152604051602091819003820181208054600181018255600091825292902090910180546001600160a01b0319166001600160a01b038616179055600a90612fe79084906159d9565b908152604051908190036020019020600501805490600061300783615b52565b9190505550826001600160a01b031660008051602061603683398151915283604051610d599190615824565b606060088260405161304591906159d9565b90815260408051918290036020908101832080548083028501830190935282845291908301828280156130a157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613083575b50505050509050919050565b6001600160a01b0381166000908152600560205260408120600401548190819060ff166130ec5760405162461bcd60e51b8152600401610c6490615f73565b60005b600254811015613163576000818152600660205260409020546001600160a01b03808716911603613151578361312481615b52565b60008381526006602052604090206005015490955060ff16159050613151578261314d81615b52565b9350505b8061315b81615b52565b9150506130ef565b5082156131835782613176836064615b6b565b6131809190615b82565b90505b9193909250565b80336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061320f5750336001600160a01b0316600a826040516131d791906159d9565b908152604051908190036020019020600201546001600160a01b031614801561320f5750336000908152600b602052604090205460ff165b61322b5760405162461bcd60e51b8152600401610c64906159f5565b60105460ff161561324e5760405162461bcd60e51b8152600401610c6490615a36565b600083511161326f5760405162461bcd60e51b8152600401610c6490615dbb565b600a8260405161327f91906159d9565b9081526040519081900360200190206002015460ff600160a01b909104166132b95760405162461bcd60e51b8152600401610c6490615fa3565b60005b8351811015612d545760008482815181106132d9576132d9615b26565b6020908102919091018101516001600160a01b0381166000908152600590925260409091206004015490915060ff1680156133495750600c8460405161331f91906159d9565b90815260408051602092819003830190206001600160a01b0384166000908152925290205460ff16155b15613467576001600c8560405161336091906159d9565b90815260408051602092819003830190206001600160a01b0385166000908152908352818120805460ff19169415159490941790935560058252822060060180546001810182559083529120016133b78582615cda565b506009846040516133c891906159d9565b908152604051602091819003820181208054600181018255600091825292902090910180546001600160a01b0319166001600160a01b038416179055600a906134129086906159d9565b908152604051908190036020019020600501805490600061343283615b52565b9190505550806001600160a01b03166000805160206160368339815191528560405161345e9190615824565b60405180910390a25b508061347281615b52565b9150506132bc565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146134c25760405162461bcd60e51b8152600401610c6490615ad0565b6001600160a01b03821660009081526004602052604090206005015460ff166134fd5760405162461bcd60e51b8152600401610c6490615ba4565b6001600160a01b03909116600090815260046020526040902060010155565b80336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806135a15750336001600160a01b0316600a8260405161356991906159d9565b908152604051908190036020019020600201546001600160a01b03161480156135a15750336000908152600b602052604090205460ff165b6135bd5760405162461bcd60e51b8152600401610c64906159f5565b60105460ff16156135e05760405162461bcd60e51b8152600401610c6490615a36565b600c826040516135f091906159d9565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff166136705760405162461bcd60e51b8152602060048201526024808201527f436c65616e6572206e6f742061737369676e656420746f206e65696768626f726044820152631a1bdbd960e21b6064820152608401610c64565b6000600c8360405161368291906159d9565b90815260408051602092819003830190206001600160a01b0387166000908152908352818120805460ff19169415159490941790935560059091528120600601905b81548110156137d357836040516020016136de91906159d9565b6040516020818303038152906040528051906020012082828154811061370657613706615b26565b906000526020600020016040516020016137209190615de9565b60405160208183030381529060405280519060200120036137c1578154829061374b90600190615e5f565b8154811061375b5761375b615b26565b9060005260206000200182828154811061377757613777615b26565b90600052602060002001908161378d9190615e72565b508180548061379e5761379e615f46565b6001900381819060005260206000200160006137ba9190614f59565b90556137d3565b806137cb81615b52565b9150506136c4565b5060006009846040516137e691906159d9565b9081526020016040518091039020905060005b81548110156138ff57856001600160a01b031682828154811061381e5761381e615b26565b6000918252602090912001546001600160a01b0316036138ed578154829061384890600190615e5f565b8154811061385857613858615b26565b9060005260206000200160009054906101000a90046001600160a01b031682828154811061388857613888615b26565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550818054806138c6576138c6615f46565b600082815260209020810160001990810180546001600160a01b03191690550190556138ff565b806138f781615b52565b9150506137f9565b50600a8460405161391091906159d9565b908152604051908190036020019020600501805490600061393083615f5c565b9190505550846001600160a01b031660008051602061605683398151915285604051611ccb9190615824565b6060600f805480602002602001604051908101604052809291908181526020016000905b82821015613a2c57838290600052602060002001805461399f90615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546139cb90615a62565b8015613a185780601f106139ed57610100808354040283529160200191613a18565b820191906000526020600020905b8154815290600101906020018083116139fb57829003601f168201915b505050505081526020019060010190613980565b50505050905090565b6000600c82604051613a4791906159d9565b90815260408051602092819003830190206001600160a01b0386166000908152925290205460ff1680613aad5750826001600160a01b0316600a83604051613a8f91906159d9565b908152604051908190036020019020600201546001600160a01b0316145b80613ae957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b9392505050565b600f8181548110613b0057600080fd5b906000526020600020016000915090508054613b1b90615a62565b80601f0160208091040260200160405190810160405280929190818152602001828054613b4790615a62565b8015613b945780601f10613b6957610100808354040283529160200191613b94565b820191906000526020600020905b815481529060010190602001808311613b7757829003601f168201915b505050505081565b6001600160a01b0383166000908152600460205260408120600501546060919060ff16613bdb5760405162461bcd60e51b8152600401610c6490615ba4565b600083118015613bec575060648311155b613c085760405162461bcd60e51b8152600401610c6490615fd4565b6000805b600254811015613c5a576000818152600660205260409020600101546001600160a01b03808916911603613c485781613c4481615b52565b9250505b80613c5281615b52565b915050613c0c565b50808510613c985760005b604051908082528060200260200182016040528015613c8e578160200160208202803683370190505b5092509050613d9a565b8381613ca48288615c63565b1115613cb757613cb48683615e5f565b90505b6000816001600160401b03811115613cd157613cd1614faf565b604051908082528060200260200182016040528015613cfa578160200160208202803683370190505b50905060008060005b60025481108015613d1357508483105b15613d8f576000818152600660205260409020600101546001600160a01b03808d16911603613d7d57898210613d6f5780848481518110613d5657613d56615b26565b602090810291909101015282613d6b81615b52565b9350505b81613d7981615b52565b9250505b80613d8781615b52565b915050613d03565b509195509293505050505b935093915050565b60105460ff1615613dc55760405162461bcd60e51b8152600401610c6490615a36565b3360009081526005602052604090206004015460ff1615613e255760405162461bcd60e51b815260206004820152601a60248201527910db19585b995c88185b1c9958591e481c9959da5cdd195c995960321b6044820152606401610c64565b3360009081526004602052604090206005015460ff1615613e945760405162461bcd60e51b815260206004820152602360248201527f4164647265737320616c7265616479207265676973746572656420617320686f60448201526275736560e81b6064820152608401610c64565b336000818152600560208190526040822080546001600160a01b03199081168517825560018083018590556064600284015560048301805460ff1916821790554293830193909355600e805480850182559085527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd018054909116909417909355805491613f2183615b52565b9190505550613f5e33600a6040518060400160405280601481526020017321b632b0b732b9102932b3b4b9ba3930ba34b7b760611b815250614e6f565b60405142815233907fdd834bc0e344533b42bfa014b5f8f8ae9d396bc5debb886b6bc56ee24c2ddf9e9060200160405180910390a250565b6060600e805480602002602001604051908101604052809291908181526020018280548015611f1d576020028201919060005260206000209081546001600160a01b03168152600190910190602001808311611eff575050505050905090565b6140416040518060e0016040528060006001600160a01b0316815260200160008152602001600081526020016060815260200160001515815260200160008152602001606081525090565b6001600160a01b03821660009081526005602052604090206004015460ff1661407c5760405162461bcd60e51b8152600401610c6490615f73565b6001600160a01b03808316600090815260056020908152604091829020825160e081018452815490941684526001810154848301526002810154848401526003810180548451818502810185019095528085529193606086019390929083018282801561410857602002820191906000526020600020905b8154815260200190600101908083116140f4575b505050505081526020016004820160009054906101000a900460ff161515151581526020016005820154815260200160068201805480602002602001604051908101604052809291908181526020016000905b8282101561420757838290600052602060002001805461417a90615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546141a690615a62565b80156141f35780601f106141c8576101008083540402835291602001916141f3565b820191906000526020600020905b8154815290600101906020018083116141d657829003601f168201915b50505050508152602001906001019061415b565b505050915250909392505050565b6001600160a01b03811660009081526005602052604090206004015460609060ff166142535760405162461bcd60e51b8152600401610c6490615f73565b6001600160a01b038216600090815260056020908152604080832060060180548251818502810185019093528083529193909284015b828210156143355783829060005260206000200180546142a890615a62565b80601f01602080910402602001604051908101604052809291908181526020018280546142d490615a62565b80156143215780601f106142f657610100808354040283529160200191614321565b820191906000526020600020905b81548152906001019060200180831161430457829003601f168201915b505050505081526020019060010190614289565b505050509050919050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146143885760405162461bcd60e51b8152600401610c6490615ad0565b6010805460ff19168215159081179091556040519081527f752d7e161ff5146f80e3820893176eb40532811e5e20400dfdde57455213706a9060200160405180910390a150565b606060098260405161304591906159d9565b6001600160a01b03811660009081526005602052604090206004015460609060ff1661441f5760405162461bcd60e51b8152600401610c6490615f73565b60006002546001600160401b0381111561443b5761443b614faf565b604051908082528060200260200182016040528015614464578160200160208202803683370190505b5090506000805b6002548110156144d4576000818152600660205260409020546001600160a01b038087169116036144c257808383815181106144a9576144a9615b26565b6020908102919091010152816144be81615b52565b9250505b806144cc81615b52565b91505061446b565b506000816001600160401b038111156144ef576144ef614faf565b604051908082528060200260200182016040528015614518578160200160208202803683370190505b50905060005b8281101561220d5783818151811061453857614538615b26565b602002602001015182828151811061455257614552615b26565b60209081029190910101528061456781615b52565b91505061451e565b6001600160a01b0383166000908152600560205260408120600401546060919060ff166145ae5760405162461bcd60e51b8152600401610c6490615f73565b6000831180156145bf575060648311155b6145db5760405162461bcd60e51b8152600401610c6490615fd4565b6000805b60025481101561462a576000818152600660205260409020546001600160a01b03808916911603614618578161461481615b52565b9250505b8061462281615b52565b9150506145df565b50808510614639576000613c65565b83816146458288615c63565b1115614658576146558683615e5f565b90505b6000816001600160401b0381111561467257614672614faf565b60405190808252806020026020018201604052801561469b578160200160208202803683370190505b50905060008060005b600254811080156146b457508483105b15613d8f576000818152600660205260409020546001600160a01b03808d1691160361471b5789821061470d57808484815181106146f4576146f4615b26565b60209081029190910101528261470981615b52565b9350505b8161471781615b52565b9250505b8061472581615b52565b9150506146a4565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146147755760405162461bcd60e51b8152600401610c6490615ad0565b60105460ff16156147985760405162461bcd60e51b8152600401610c6490615a36565b60008351116147f35760405162461bcd60e51b815260206004820152602160248201527f4e65696768626f72686f6f64206e616d652063616e6e6f7420626520656d70746044820152607960f81b6064820152608401610c64565b60008251116148425760405162461bcd60e51b815260206004820152601b60248201527a4465736372697074696f6e2063616e6e6f7420626520656d70747960281b6044820152606401610c64565b6001600160a01b0381166148685760405162461bcd60e51b8152600401610c6490615af7565b600a8360405161487891906159d9565b908152604051908190036020019020805461489290615a62565b1590506148df5760405162461bcd60e51b815260206004820152601b60248201527a4e65696768626f72686f6f6420616c72656164792065786973747360281b6044820152606401610c64565b6000600a846040516148f191906159d9565b90815260405190819003602001902090508061490d8582615cda565b506001810161491c8482615cda565b506002810180546001600160a81b0319166001600160a01b038416908117600160a01b179091554260038301556000908152600b60205260408120805460ff19166001908117909155600f805491820181559091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020161499d8582615cda565b50816001600160a01b0316846040516149b691906159d9565b604051908190038120428252907ff36227d4e0a75a4b5b4ba2bbf468614d1007c3770a1d73ac7da8145fee8bc6109060200160405180910390a350505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614614a3e5760405162461bcd60e51b8152600401610c6490615ad0565b6001600160a01b03821660009081526005602052604090206004015460ff16614a795760405162461bcd60e51b8152600401610c6490615f73565b6001600160a01b03909116600090815260056020526040902060020155565b3360009081526005602052604090206004015460ff16614aca5760405162461bcd60e51b8152600401610c6490615f73565b60105460ff1615614aed5760405162461bcd60e51b8152600401610c6490615a36565b6001600160a01b03831660009081526004602052604090206005015460ff16614b285760405162461bcd60e51b8152600401610c6490615ba4565b81614b455760405162461bcd60e51b8152600401610c6490615bfc565b6000815111614b665760405162461bcd60e51b8152600401610c6490615c30565b6001600160a01b03831660009081526004602052604081206002018054614b8c90615a62565b80601f0160208091040260200160405190810160405280929190818152602001828054614bb890615a62565b8015614c055780601f10614bda57610100808354040283529160200191614c05565b820191906000526020600020905b815481529060010190602001808311614be857829003601f168201915b50505050509050600c81604051614c1c91906159d9565b9081526040805160209281900383019020336000908152925290205460ff1680614c795750336001600160a01b0316600a82604051614c5b91906159d9565b908152604051908190036020019020600201546001600160a01b0316145b80614cac5750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b614d0c5760405162461bcd60e51b815260206004820152602b60248201527f436c65616e6572206e6f7420617574686f72697a656420696e2074686973206e60448201526a195a59da189bdc9a1bdbd960aa1b6064820152608401610c64565b6002805460008181526006602052604090208054336001600160a01b03199182161782556001820180549091166001600160a01b0389161790554292810192909255600382018590559060048101614d648582615cda565b506005808201805460ff19169055600682018390553360009081526020918252604080822060030180546001810182559083529290912090910186905551600a90614db09085906159d9565b9081526040519081900360200190206006018054906000614dd083615b52565b909155505060028054906000614de583615b52565b9190505550614e203360146040518060400160405280601281526020017123b0b93130b3b29021b7b63632b1ba34b7b760711b815250614e6f565b604080518681524260208201526001600160a01b03881691339185917f6abb0de111797db4aa016f586b051a7b88947ba2c320bea32058f7db7508d713910160405180910390a4505050505050565b6001600160a01b03831660009081526004602052604090206005015460ff1615614ec9576001600160a01b03831660009081526004602052604081206001018054849290614ebe908490615c63565b90915550614f1e9050565b6001600160a01b03831660009081526005602052604090206004015460ff1615614f1e576001600160a01b03831660009081526005602052604081206001018054849290614f18908490615c63565b90915550505b826001600160a01b03167f4c3089477cda1ac100291a040b3ac97ff5f55b6d8b2acfb56a59b9419d95ce048383604051610d5992919061601c565b508054614f6590615a62565b6000825580601f10614f75575050565b601f016020900490600052602060002090810190614f939190614f96565b50565b5b80821115614fab5760008155600101614f97565b5090565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614fed57614fed614faf565b604052919050565b600082601f83011261500657600080fd5b81356001600160401b0381111561501f5761501f614faf565b615032601f8201601f1916602001614fc5565b81815284602083860101111561504757600080fd5b816020850160208301376000918101602001919091529392505050565b8035801515811461507457600080fd5b919050565b6000806040838503121561508c57600080fd5b82356001600160401b038111156150a257600080fd5b6150ae85828601614ff5565b9250506150bd60208401615064565b90509250929050565b80356001600160a01b038116811461507457600080fd5b600080604083850312156150f057600080fd5b82356001600160401b0381111561510657600080fd5b61511285828601614ff5565b9250506150bd602084016150c6565b60006020828403121561513357600080fd5b81356001600160401b0381111561514957600080fd5b61515584828501614ff5565b949350505050565b60008060006060848603121561517257600080fd5b833592506020840135915060408401356001600160401b0381111561519657600080fd5b6151a286828701614ff5565b9150509250925092565b6000602082840312156151be57600080fd5b5035919050565b6000602082840312156151d757600080fd5b613ae9826150c6565b600080604083850312156151f357600080fd5b82356001600160401b0381111561520957600080fd5b61521585828601614ff5565b95602094909401359450505050565b60005b8381101561523f578181015183820152602001615227565b50506000910152565b60008151808452615260816020860160208601615224565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b838110156152a457815187529582019590820190600101615288565b509495945050505050565b6020815260018060a01b038251166020820152602082015160408201526000604083015160e060608401526152e8610100840182615248565b905060ff60608501511660808401526080840151601f198483030160a08501526153128282615274565b91505060a0840151151560c084015260c084015160e08401528091505092915050565b6000806040838503121561534857600080fd5b82356001600160401b0381111561535e57600080fd5b61536a85828601614ff5565b925050602083013560ff8116811461538157600080fd5b809150509250929050565b6001600160a01b03888116825287166020820152604081018690526060810185905260e0608082018190526000906153c690830186615248565b93151560a08301525060c0015295945050505050565b600080604083850312156153ef57600080fd5b6153f8836150c6565b915060208301356001600160401b0381111561541357600080fd5b61541f85828601614ff5565b9150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561546a5783516001600160a01b031683529284019291840191600101615445565b50909695505050505050565b60208152600060018060a01b03808451166020840152806020850151166040840152506040830151606083015260608301516080830152608083015160e060a08401526154c7610100840182615248565b905060a0840151151560c084015260c084015160e08401528091505092915050565b602081526000613ae96020830184615274565b60018060a01b038716815285602082015260c06040820152600061552360c0830187615248565b60ff95909516606083015250911515608083015260a0909101529392505050565b6001600160a01b038916815260208101889052610100604082018190526000906155708382018a615248565b905082810360608401526155848189615248565b905082810360808401526155988188615248565b60ff9690961660a0840152505060c081019290925260e09091015295945050505050565b60006101208083526155d08184018d615248565b905082810360208401526155e4818c615248565b6001600160a01b039a909a16604084015250509515156060870152608086019490945260a085019290925260c084015260e08301526101009091015292915050565b6020815260008251610120806020850152615645610140850183615248565b91506020850151601f198584030160408601526156628382615248565b925050604085015161567f60608601826001600160a01b03169052565b506060850151801515608086015250608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151838701525050508091505092915050565b600080604083850312156156e157600080fd5b82356001600160401b03808211156156f857600080fd5b818501915085601f83011261570c57600080fd5b813560208282111561572057615720614faf565b8160051b61572f828201614fc5565b928352848101820192828101908a85111561574957600080fd5b958301955b8487101561576e5761575f876150c6565b8252958301959083019061574e565b975050508601359250508082111561578557600080fd5b5061541f85828601614ff5565b600080604083850312156157a557600080fd5b6157ae836150c6565b946020939093013593505050565b600081518084526020808501808196508360051b8101915082860160005b858110156158045782840389526157f2848351615248565b988501989350908401906001016157da565b5091979650505050505050565b602081526000613ae960208301846157bc565b602081526000613ae96020830184615248565b60008060006060848603121561584c57600080fd5b615855846150c6565b95602085013595506040909401359392505050565b60408152600061587d6040830185615274565b90508260208301529392505050565b6020815260018060a01b03825116602082015260208201516040820152604082015160608201526000606083015160e060808401526158cf610100840182615274565b90506080840151151560a084015260a084015160c084015260c0840151601f198483030160e085015261590282826157bc565b95945050505050565b60006020828403121561591d57600080fd5b613ae982615064565b60008060006060848603121561593b57600080fd5b83356001600160401b038082111561595257600080fd5b61595e87838801614ff5565b9450602086013591508082111561597457600080fd5b5061598186828701614ff5565b925050615990604085016150c6565b90509250925092565b6000806000606084860312156159ae57600080fd5b6159b7846150c6565b92506020840135915060408401356001600160401b0381111561519657600080fd5b600082516159eb818460208701615224565b9190910192915050565b60208082526021908201527f4e6f7420617574686f72697a6564206e65696768626f72686f6f642061646d696040820152603760f91b606082015260800190565b60208082526012908201527110dbdb9d1c9858dd081a5cc81c185d5cd95960721b604082015260600190565b600181811c90821680615a7657607f821691505b602082108103615a9657634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601a908201527913995a59da189bdc9a1bdbd908191bd95cdb89dd08195e1a5cdd60321b604082015260600190565b6020808252600d908201526c2737ba103a34329037bbb732b960991b604082015260600190565b602080825260159082015274496e76616c69642061646d696e206164647265737360581b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201615b6457615b64615b3c565b5060010190565b808202811582820484141761196c5761196c615b3c565b600082615b9f57634e487b7160e01b600052601260045260246000fd5b500490565b602080825260149082015273121bdd5cd9481b9bdd081c9959da5cdd195c995960621b604082015260600190565b60208082526010908201526f125b9d985b1a5908195d995b9d08125160821b604082015260600190565b6020808252601a9082015279496d61676520686173682063616e6e6f7420626520656d70747960301b604082015260600190565b602080825260199082015278496d616765205552492063616e6e6f7420626520656d70747960381b604082015260600190565b8082018082111561196c5761196c615b3c565b601f821115615cc057600081815260208120601f850160051c81016020861015615c9d5750805b601f850160051c820191505b81811015615cbc57828155600101615ca9565b5050505b505050565b600019600383901b1c191660019190911b1790565b81516001600160401b03811115615cf357615cf3614faf565b615d0781615d018454615a62565b84615c76565b602080601f831160018114615d365760008415615d245750858301515b615d2e8582615cc5565b865550615cbc565b600085815260208120601f198616915b82811015615d6557888601518255948401946001909101908401615d46565b5085821015615d835787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b606081526000615da66060830186615248565b60ff9490941660208301525060400152919050565b602080825260149082015273139bc818db19585b995c9cc81c1c9bdd9a59195960621b604082015260600190565b6000808354615df781615a62565b60018281168015615e0f5760018114615e2457615e53565b60ff1984168752821515830287019450615e53565b8760005260208060002060005b85811015615e4a5781548a820152908401908201615e31565b50505082870194505b50929695505050505050565b8181038181111561196c5761196c615b3c565b818103615e7d575050565b615e878254615a62565b6001600160401b03811115615e9e57615e9e614faf565b615eac81615d018454615a62565b6000601f821160018114615eda5760008315615ec85750848201545b615ed28482615cc5565b855550615f3f565b600085815260209020601f19841690600086815260209020845b83811015615f145782860154825560019586019590910190602001615ef4565b5085831015615f325781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b634e487b7160e01b600052603160045260246000fd5b600081615f6b57615f6b615b3c565b506000190190565b60208082526016908201527510db19585b995c881b9bdd081c9959da5cdd195c995960521b604082015260600190565b6020808252601790820152764e65696768626f72686f6f64206e6f742061637469766560481b604082015260600190565b60208082526028908201527f496e76616c6964206c696d69743a206d757374206265206265747765656e2031604082015267020616e64203130360c41b606082015260800190565b828152604060208201526000615155604083018461524856fe51d702b24d103745e0d20301c211e010c409a7c9e44ee6f4670d99cde9ea3eb5ee186675c6b8e9fd58ce1f6273a3a8f21e41653bcf8a4041f606edc00099c202a2646970667358221220faeb718ffd191d2b783216764c7de860bd2420ff71eb694c733c67e3f6cb5ef364736f6c63430008140033",
  "devdoc": {
    "author": "CleanChain Team",
    "kind": "dev",
    "methods": {
      "assignCleanerToNeighborhood(address,string)": {
        "params": {
          "_cleaner": "Address of the cleaner",
          "_neighborhood": "Name of the neighborhood"
        }
      },
      "assignNeighborhoodAdmin(string,address)": {
        "params": {
          "_neighborhood": "Name of the neighborhood",
          "_newAdmin": "Address of the new admin"
        }
      },
      "batchAssignCleanersToNeighborhood(address[],string)": {
        "params": {
          "_cleaners": "Array of cleaner addresses",
          "_neighborhood": "Name of the neighborhood"
        }
      },
      "batchRemoveCleanersFromNeighborhood(address[],string)": {
        "params": {
          "_cleaners": "Array of cleaner addresses",
          "_neighborhood": "Name of the neighborhood"
        }
      },
      "confirmGarbageCollection(uint256,bytes32,string)": {
        "params": {
          "_eventId": "ID of the collection event to confirm",
          "_imageHash": "Hash of the validation image taken by the house",
          "_imageURI": "URI pointing to the house's validation image"
        }
      },
      "getAllNeighborhoods()": {
        "returns": {
          "_0": "Array of neighborhood names"
        }
      },
      "getAllRegisteredCleaners()": {
        "returns": {
          "_0": "Array of all registered cleaner addresses"
        }
      },
      "getAllRegisteredHouses()": {
        "returns": {
          "_0": "Array of all registered house addresses"
        }
      },
      "getCleaner(address)": {
        "params": {
          "_cleanerAddress": "Address of the cleaner"
        },
        "returns": {
          "_0": "Cleaner struct containing all cleaner information"
        }
      },
      "getCleanerCollectionEvents(address)": {
        "details": "This function may run out of gas with large datasets. Use getCleanerCollectionEventsPaginated instead.",
        "params": {
          "_cleanerAddress": "Address of the cleaner"
        },
        "returns": {
          "_0": "Array of event IDs for the cleaner"
        }
      },
      "getCleanerCollectionEventsPaginated(address,uint256,uint256)": {
        "params": {
          "_cleanerAddress": "Address of the cleaner",
          "_limit": "Maximum number of events to return",
          "_offset": "Starting index for pagination"
        },
        "returns": {
          "_0": "Array of event IDs for the cleaner",
          "_1": "Total count of events for this cleaner"
        }
      },
      "getCleanerCollectionStats(address)": {
        "params": {
          "_cleanerAddress": "Address of the cleaner"
        },
        "returns": {
          "confirmationRate": "Percentage of confirmed collections (0-100)",
          "confirmedEvents": "Number of confirmed collection events",
          "totalEvents": "Total collection events by the cleaner"
        }
      },
      "getCleanerNeighborhoods(address)": {
        "params": {
          "_cleanerAddress": "Address of the cleaner"
        },
        "returns": {
          "_0": "Array of neighborhood names where cleaner is authorized"
        }
      },
      "getCleanersInNeighborhood(string)": {
        "params": {
          "_neighborhood": "Name of the neighborhood"
        },
        "returns": {
          "_0": "Array of cleaner addresses in the neighborhood"
        }
      },
      "getCollectionEvent(uint256)": {
        "params": {
          "_eventId": "ID of the collection event"
        },
        "returns": {
          "_0": "CollectionEvent struct containing event details"
        }
      },
      "getHouse(address)": {
        "params": {
          "_houseAddress": "Address of the house"
        },
        "returns": {
          "_0": "House struct containing all house information"
        }
      },
      "getHouseCollectionEvents(address)": {
        "details": "This function may run out of gas with large datasets. Use getHouseCollectionEventsPaginated instead.",
        "params": {
          "_houseAddress": "Address of the house"
        },
        "returns": {
          "_0": "Array of event IDs for the house"
        }
      },
      "getHouseCollectionEventsPaginated(address,uint256,uint256)": {
        "params": {
          "_houseAddress": "Address of the house",
          "_limit": "Maximum number of events to return",
          "_offset": "Starting index for pagination"
        },
        "returns": {
          "_0": "Array of event IDs for the house",
          "_1": "Total count of events for this house"
        }
      },
      "getHouseCollectionStats(address)": {
        "params": {
          "_houseAddress": "Address of the house"
        },
        "returns": {
          "confirmedEvents": "Number of confirmed collection events",
          "pendingEvents": "Number of pending (unconfirmed) collection events",
          "totalEvents": "Total collection events for the house"
        }
      },
      "getHousesInNeighborhood(string)": {
        "params": {
          "_neighborhood": "Name of the neighborhood"
        },
        "returns": {
          "_0": "Array of house addresses in the neighborhood"
        }
      },
      "getNeighborhood(string)": {
        "params": {
          "_neighborhood": "Name of the neighborhood"
        },
        "returns": {
          "_0": "Neighborhood struct containing all neighborhood information"
        }
      },
      "getNeighborhoodStats(string)": {
        "params": {
          "_neighborhood": "Name of the neighborhood"
        },
        "returns": {
          "confirmationRate": "Percentage of confirmed collections (0-100)",
          "confirmedCollections": "Number of confirmed collections",
          "totalCleaners": "Number of cleaners assigned to neighborhood",
          "totalCollections": "Total collection events in neighborhood",
          "totalHouses": "Number of houses in neighborhood"
        }
      },
      "getTotalCleaners()": {
        "returns": {
          "_0": "Total number of cleaners"
        }
      },
      "getTotalHouses()": {
        "returns": {
          "_0": "Total number of houses"
        }
      },
      "getTotalNeighborhoods()": {
        "returns": {
          "_0": "Total number of neighborhoods"
        }
      },
      "isCleanerAlreadyAssigned(address,string)": {
        "params": {
          "_cleaner": "Address of the cleaner",
          "_neighborhood": "Name of the neighborhood"
        },
        "returns": {
          "_0": "Boolean indicating if cleaner is already assigned"
        }
      },
      "isCleanerAuthorized(address,string)": {
        "params": {
          "_cleaner": "Address of the cleaner",
          "_neighborhood": "Name of the neighborhood"
        },
        "returns": {
          "_0": "Boolean indicating if cleaner is authorized"
        }
      },
      "isNeighborhoodAdmin(address)": {
        "params": {
          "_address": "Address to check"
        },
        "returns": {
          "_0": "Boolean indicating if address is a neighborhood admin"
        }
      },
      "isPaused()": {
        "returns": {
          "_0": "Boolean indicating if contract is paused"
        }
      },
      "isRegisteredCleaner(address)": {
        "params": {
          "_address": "Address to check"
        },
        "returns": {
          "_0": "Boolean indicating if address is a registered cleaner"
        }
      },
      "isRegisteredHouse(address)": {
        "params": {
          "_address": "Address to check"
        },
        "returns": {
          "_0": "Boolean indicating if address is a registered house"
        }
      },
      "logGarbageCollection(address,bytes32,string)": {
        "params": {
          "_houseAddress": "Address of the house where garbage was collected",
          "_imageHash": "Hash of the image taken as proof of collection",
          "_imageURI": "URI pointing to the off-chain stored image"
        }
      },
      "pauseContract(bool)": {
        "params": {
          "_paused": "New pause state"
        }
      },
      "registerHouse(string,uint8)": {
        "params": {
          "_neighborhood": "The neighborhood where the house is located",
          "_residents": "Number of residents in the house"
        }
      },
      "registerNeighborhood(string,string,address)": {
        "params": {
          "_admin": "Address of the neighborhood admin",
          "_description": "Description of the neighborhood",
          "_name": "Name of the neighborhood"
        }
      },
      "removeCleanerFromNeighborhood(address,string)": {
        "params": {
          "_cleaner": "Address of the cleaner",
          "_neighborhood": "Name of the neighborhood"
        }
      },
      "setNeighborhoodStatus(string,bool)": {
        "params": {
          "_isActive": "New status for the neighborhood",
          "_neighborhood": "Name of the neighborhood"
        }
      },
      "updateCleanerReputation(address,uint256)": {
        "params": {
          "_cleanerAddress": "Address of the cleaner",
          "_reputation": "New reputation value"
        }
      },
      "updateHousePoints(address,uint256)": {
        "params": {
          "_houseAddress": "Address of the house",
          "_points": "New points value"
        }
      },
      "validateNeighborhoodExists(string)": {
        "params": {
          "_neighborhood": "Name of the neighborhood to check"
        },
        "returns": {
          "_0": "Boolean indicating if neighborhood exists and is active"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assignCleanerToNeighborhood(address,string)": {
        "notice": "Assign cleaner to neighborhood (by admin or owner)"
      },
      "assignNeighborhoodAdmin(string,address)": {
        "notice": "Assign or change neighborhood admin"
      },
      "batchAssignCleanersToNeighborhood(address[],string)": {
        "notice": "Batch assign multiple cleaners to a neighborhood"
      },
      "batchRemoveCleanersFromNeighborhood(address[],string)": {
        "notice": "Batch remove multiple cleaners from a neighborhood"
      },
      "confirmGarbageCollection(uint256,bytes32,string)": {
        "notice": "Confirm garbage collection by house with validation"
      },
      "getAllNeighborhoods()": {
        "notice": "Get all registered neighborhoods"
      },
      "getAllRegisteredCleaners()": {
        "notice": "Get all registered cleaner addresses"
      },
      "getAllRegisteredHouses()": {
        "notice": "Get all registered house addresses"
      },
      "getCleaner(address)": {
        "notice": "Get cleaner information by address"
      },
      "getCleanerCollectionEvents(address)": {
        "notice": "Get all collection events for a specific cleaner (DEPRECATED - use paginated version)"
      },
      "getCleanerCollectionEventsPaginated(address,uint256,uint256)": {
        "notice": "Get collection events for a cleaner with pagination to avoid gas issues"
      },
      "getCleanerCollectionStats(address)": {
        "notice": "Get collection statistics for a cleaner"
      },
      "getCleanerNeighborhoods(address)": {
        "notice": "Get neighborhoods assigned to a cleaner"
      },
      "getCleanersInNeighborhood(string)": {
        "notice": "Get all cleaners in a neighborhood"
      },
      "getCollectionEvent(uint256)": {
        "notice": "Get collection event details by ID"
      },
      "getHouse(address)": {
        "notice": "Get house information by address"
      },
      "getHouseCollectionEvents(address)": {
        "notice": "Get all collection events for a specific house (DEPRECATED - use paginated version)"
      },
      "getHouseCollectionEventsPaginated(address,uint256,uint256)": {
        "notice": "Get collection events for a house with pagination to avoid gas issues"
      },
      "getHouseCollectionStats(address)": {
        "notice": "Get collection statistics for a house"
      },
      "getHousesInNeighborhood(string)": {
        "notice": "Get all houses in a neighborhood"
      },
      "getNeighborhood(string)": {
        "notice": "Get neighborhood information"
      },
      "getNeighborhoodStats(string)": {
        "notice": "Get neighborhood statistics"
      },
      "getTotalCleaners()": {
        "notice": "Get total number of registered cleaners"
      },
      "getTotalHouses()": {
        "notice": "Get total number of registered houses"
      },
      "getTotalNeighborhoods()": {
        "notice": "Get total number of registered neighborhoods"
      },
      "isCleanerAlreadyAssigned(address,string)": {
        "notice": "FIXED: Check for duplicate cleaner assignment more efficiently"
      },
      "isCleanerAuthorized(address,string)": {
        "notice": "Check if cleaner is authorized in neighborhood"
      },
      "isNeighborhoodAdmin(address)": {
        "notice": "Check if address is a neighborhood admin"
      },
      "isPaused()": {
        "notice": "Get contract pause status"
      },
      "isRegisteredCleaner(address)": {
        "notice": "Check if an address is a registered cleaner"
      },
      "isRegisteredHouse(address)": {
        "notice": "Check if an address is a registered house"
      },
      "logGarbageCollection(address,bytes32,string)": {
        "notice": "Log garbage collection by cleaner with image proof"
      },
      "pauseContract(bool)": {
        "notice": "Pause or unpause the contract (emergency function)"
      },
      "registerCleaner()": {
        "notice": "Register a cleaner with wallet public key"
      },
      "registerHouse(string,uint8)": {
        "notice": "Register a house with wallet public key and metadata"
      },
      "registerNeighborhood(string,string,address)": {
        "notice": "Register a new neighborhood with admin"
      },
      "removeCleanerFromNeighborhood(address,string)": {
        "notice": "Remove cleaner from neighborhood"
      },
      "setNeighborhoodStatus(string,bool)": {
        "notice": "Activate or deactivate a neighborhood"
      },
      "updateCleanerReputation(address,uint256)": {
        "notice": "Update cleaner reputation (only owner)"
      },
      "updateHousePoints(address,uint256)": {
        "notice": "Update house points (only owner)"
      },
      "validateNeighborhoodExists(string)": {
        "notice": "FIXED: Validate that a neighborhood exists before operations"
      }
    },
    "notice": "CleanChain - Decentralized Garbage Collection Verification Platform A smart contract for tracking, verifying, and incentivizing neighborhood garbage collection",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "totalHouses",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "totalCleaners",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "totalCollectionEvents",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 16,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "totalComplaints",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 108,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "houses",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(House)32_storage)"
      },
      {
        "astId": 113,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "cleaners",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Cleaner)49_storage)"
      },
      {
        "astId": 118,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "collectionEvents",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(CollectionEvent)64_storage)"
      },
      {
        "astId": 123,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "complaints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Complaint)84_storage)"
      },
      {
        "astId": 128,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "neighborhoodHouses",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 133,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "neighborhoodCleaners",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 138,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "neighborhoods",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Neighborhood)103_storage)"
      },
      {
        "astId": 142,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "neighborhoodAdmins",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 148,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "cleanerNeighborhoodAccess",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 151,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "registeredHouses",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 154,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "registeredCleaners",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 157,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "registeredNeighborhoods",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 160,
        "contract": "contracts/CleanChain.sol:CleanChain",
        "label": "contractPaused",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Cleaner)49_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CleanChain.Cleaner)",
        "numberOfBytes": "32",
        "value": "t_struct(Cleaner)49_storage"
      },
      "t_mapping(t_address,t_struct(House)32_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CleanChain.House)",
        "numberOfBytes": "32",
        "value": "t_struct(House)32_storage"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Neighborhood)103_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct CleanChain.Neighborhood)",
        "numberOfBytes": "32",
        "value": "t_struct(Neighborhood)103_storage"
      },
      "t_mapping(t_uint256,t_struct(CollectionEvent)64_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CleanChain.CollectionEvent)",
        "numberOfBytes": "32",
        "value": "t_struct(CollectionEvent)64_storage"
      },
      "t_mapping(t_uint256,t_struct(Complaint)84_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CleanChain.Complaint)",
        "numberOfBytes": "32",
        "value": "t_struct(Complaint)84_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Cleaner)49_storage": {
        "encoding": "inplace",
        "label": "struct CleanChain.Cleaner",
        "members": [
          {
            "astId": 34,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 36,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "points",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 38,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "reputation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 41,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "collectionHashes",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 43,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "isRegistered",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 45,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "registrationTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 48,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "assignedNeighborhoods",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(CollectionEvent)64_storage": {
        "encoding": "inplace",
        "label": "struct CleanChain.CollectionEvent",
        "members": [
          {
            "astId": 51,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "cleaner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 53,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "house",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 55,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "timestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 57,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "imageHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 59,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "imageURI",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 61,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "confirmedByHouse",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 63,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "eventId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Complaint)84_storage": {
        "encoding": "inplace",
        "label": "struct CleanChain.Complaint",
        "members": [
          {
            "astId": 66,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "reporter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 68,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "imageHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 70,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "imageURI",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 72,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "location",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 74,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "neighborhood",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 77,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "validators",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 79,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 81,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "timestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 83,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "complaintId",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(House)32_storage": {
        "encoding": "inplace",
        "label": "struct CleanChain.House",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "wallet",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 20,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "points",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "neighborhood",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 24,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "residents",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 27,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "collectionHashes",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 29,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "isRegistered",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 31,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "registrationTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Neighborhood)103_storage": {
        "encoding": "inplace",
        "label": "struct CleanChain.Neighborhood",
        "members": [
          {
            "astId": 86,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 88,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 90,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "admin",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 92,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "isActive",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 94,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "registrationTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 96,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "totalHouses",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 98,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "totalCleaners",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 100,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "totalCollections",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 102,
            "contract": "contracts/CleanChain.sol:CleanChain",
            "label": "confirmedCollections",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}